// -*- zig -*-
// Well, this is actually zig...
// https://en.wikipedia.org/wiki/LZMA
// See https://github.com/gendx/lzma-rs.git
// License: MIT

const std = @import("std");
const mem = std.mem;
const warn = std.debug.warn;
const assert = std.debug.assert;
const assertError = std.debug.assertError;
const assertOrPanic = std.debug.assertOrPanic;
const builtin = @import("builtin");

const rangecoder = @import("rangecoder.zig");
const RangeDecoder = rangecoder.RangeDecoder;
const DummyOutStream = @import("lzstream.zig").DummyOutStream;
const DummyInStream = @import("lzstream.zig").DummyInStream;
const LZCircularBuffer = @import("lzbuffers.zig").LZCircularBuffer;

const crc32 = std.hash.crc.Crc32;

pub const LZMAParams = struct {
    // most lc significant bits of previous byte are part of the literal context
    lc: u32, // 0..8
    lp: u32, // 0..4
    // context for literal/match is plaintext offset modulo 2^pb
    pb: u32, // 0..4
    dict_size: u32,
    unpacked_size: ?u64,
    // NOTE: Temporary hack
    pos: usize,

    pub fn read_header(input: []u8) !LZMAParams
    {
        // Properties
        var idx: usize = 0;
        // NOTE: Arbitrary check for now
        if (input.len < 13) {
            warn("LZMA header too short: {}\n", input.len);
            return error.LZMAError;
        }

        const props = input[idx];
        idx += @sizeOf(u8);

        var pb = u32(props);
        if (pb >= 225) {
            warn("LZMA header invalid properties: {} must be < 225\n", pb);
            return error.LZMAError;
        }

        const lc: u32 = pb % 9;
        pb /= 9;
        const lp: u32 = pb % 5;
        pb /= 5;

        //warn("Properties {{ lc: {}, lp: {}, pb: {} }}\n", lc, lp, pb);

        // Dictionary

        
        // const dict_size_provided = mem.readIntSlice(u32, input[idx..idx + @sizeOf(u32)],
        //                                             builtin.Endian.Little);
        const dict_size_provided = u32(input[idx + 3]) | u32(input[idx + 2]) << 8
            | u32(input[idx + 1]) << 16 | u32(input[idx + 0]) << 24;
        idx += @sizeOf(u32);
        const dict_size = if (dict_size_provided < 0x1000) 0x1000 else dict_size_provided;
        warn("dict_size={}, dict_size_provided={}\n", dict_size, dict_size_provided);

        // Unpacked size
        const unpacked_size_provided = mem.readIntSlice(u64, input[idx..], builtin.Endian.Little);
        idx += @sizeOf(u64);
        const marker_mandatory: bool = unpacked_size_provided == 0xFFFFFFFFFFFFFFFF;
        const unpacked_size = if (marker_mandatory) null else unpacked_size_provided;
        warn("Unpacked size={}, mandatory={}, idx={}\n", unpacked_size, marker_mandatory, idx);

        return LZMAParams {.lc = lc, .lp = lp, .pb = pb,
                           .dict_size = dict_size, .unpacked_size = unpacked_size, .pos = idx};
    }
};

// Initialize decoder with buffer of type T
pub fn Decoder(comptime T: type, ) type {
    // Decoder
    return struct {
        const Self = @This();

        pub output: T,
        // most lc significant bits of previous byte are part of the literal context
        pub lc: u32, // 0..8
        pub lp: u32, // 0..4
        // context for literal/match is plaintext offset modulo 2^pb
        pub pb: u32, // 0..4
        unpacked_size: ?u64,
        // TODO: We may have maxed this out...
        literal_probs: [4096][0x300]u16, //Vec<Vec<u16>>,
        pos_slot_decoder: [4]rangecoder.BitTree(6),
        align_decoder: rangecoder.BitTree(4),
        pos_decoders: [115]u16,
        is_match: [192]u16, // true = LZ, false = literal
        is_rep: [12]u16,
        is_rep_g0: [12]u16,
        is_rep_g1: [12]u16,
        is_rep_g2: [12]u16,
        is_rep_0long: [192]u16,
        state: usize,
        rep: [4]usize,
        len_decoder: rangecoder.LenDecoder(3, 8),
        rep_len_decoder: rangecoder.LenDecoder(3, 8),

        pub fn init(output: T, params: LZMAParams) Self {
            return Self {
                .output = output,
                .lc = params.lc,
                .lp = params.lp,
                .pb = params.pb,
                .unpacked_size = params.unpacked_size,
                .literal_probs = [_][0x300]u16{[_]u16{0x400} ** 0x300} ** 4096,
                .pos_slot_decoder = [_]rangecoder.BitTree(6) {rangecoder.BitTree(6).init()} ** 4,
                .align_decoder = rangecoder.BitTree(4).init(),
                .pos_decoders = [_]u16{0x400} ** 115,
                .is_match = [_]u16{0x400} ** 192,
                .is_rep = [_]u16{0x400} ** 12,
                .is_rep_g0 = [_]u16{0x400} ** 12,
                .is_rep_g1 = [_]u16{0x400} ** 12,
                .is_rep_g2 = [_]u16{0x400} ** 12,
                .is_rep_0long = [_]u16{0x400} ** 192,
                .state = 0,
                .rep = [_]usize{0,0,0,0},
                .len_decoder = rangecoder.LenDecoder(3, 8).init(),
                .rep_len_decoder = rangecoder.LenDecoder(3, 8).init()
            };
        }

        pub fn reset_state(self: *Self, lc: u32, lp: u32, pb: u32) void {
            self.lc = lc;
            self.lp = lp;
            self.pb = pb;
            self.literal_probs = [_][0x300]u16{[_]u16{0x400} ** 0x300} ** 4096;
            self.pos_slot_decoder = [_]rangecoder.BitTree(6) {rangecoder.BitTree(6).init()} ** 4;
            self.align_decoder = rangecoder.BitTree(4).init();
            self.pos_decoders = [_]u16{0x400} ** 115;
            self.is_match = [_]u16{0x400} ** 192;
            self.is_rep = [_]u16{0x400} ** 12;
            self.is_rep_g0 = [_]u16{0x400} ** 12;
            self.is_rep_g1 = [_]u16{0x400} ** 12;
            self.is_rep_g2 = [_]u16{0x400} ** 12;
            self.is_rep_0long = [_]u16{0x400} ** 192;
            self.state = 0;
            self.rep = [_]usize{0,0,0,0};
            self.len_decoder = rangecoder.LenDecoder(3, 8).init();
            self.rep_len_decoder = rangecoder.LenDecoder(3, 8).init();
        }

        pub fn set_unpacked_size(self: *Self, unpacked_size: ?u64) void {
            self.unpacked_size = unpacked_size;
        }


        pub fn process(self: *Self, rcoder: *rangecoder.RangeDecoder) !void {
            // For debugging
            var iter = usize(0);
            while (true) {
                iter += 1;
                //warn("Loop {}, {}\n", iter, self.output);
                if (self.unpacked_size) |_| {
                    if (rcoder.is_finished_ok()) {
                        break;
                    }
                }
                const pos_state = self.output.len & ((usize(1) << @truncate(u6, self.pb)) - 1);
                //warn("### self.state={}, pos_state={}\n", self.state, pos_state);

                // Literal
                // TODO: assumes pb = 2 ??
                if ((try rcoder.decode_bit(&self.is_match[(self.state << 4) + pos_state])) == 0) {
                    const byte: u8 = try self.decode_literal(rcoder);
                    //warn("Literal: {}/{c}\n", byte, byte);
                    try self.output.append_literal(byte);

                    self.state = if (self.state < 4) 0 else if (self.state < 10) self.state - 3
                        else self.state - 6;
                    
                    continue;
                }
                // LZ
                var len: usize = undefined;
                // Distance is repeated from LRU
                if ((try rcoder.decode_bit(&self.is_rep[self.state])) == 1) {
                    warn("1\n");
                    //dist = rep[0];
                    if ((try rcoder.decode_bit(&self.is_rep_g0[self.state])) == 0) {
                        //len = 1;
                        if ((try rcoder.decode_bit(&self.is_rep_0long[(self.state << 4) + pos_state])) == 0)
                        {
                            warn("update state (short rep)\n");
                            // update state (short rep)
                            self.state = if (self.state < 7) usize(9) else usize(11);
                            const dist = self.rep[0] + 1;
                            try self.output.append_lz(1, dist);
                            continue;
                        }
                        // dist = rep[i]
                    } else {
                        warn("1 else\n");
                        var idx: usize = undefined;
                        if ((try rcoder.decode_bit(&self.is_rep_g1[self.state])) == 0){
                            idx = 1;
                        } else {
                            if ((try rcoder.decode_bit(&self.is_rep_g2[self.state])) == 0){
                                idx = 2;
                            } else {
                                idx = 3;
                            }
                        }
                        // Update LRU
                        const dist = self.rep[idx];
                        // for i in (0..idx).rev() {
                        //     self.rep[i + 1] = self.rep[i];
                        // }
                        var i: usize = idx;
                        while(i > 0) : (i -= 1) {
                            self.rep[i] = self.rep[i - 1];
                            
                        }
                        self.rep[0] = dist;
                    }

                    len = try self.rep_len_decoder.decode(rcoder, pos_state);
                    // update state (rep)
                    self.state = if (self.state < 7) usize(8) else usize(11);
                    // New distance
                } else {
                    warn("New distance, update LRU\n");
                    // Update LRU
                    self.rep[3] = self.rep[2];
                    self.rep[2] = self.rep[1];
                    self.rep[1] = self.rep[0];
                    len = try self.len_decoder.decode(rcoder, pos_state);

                    // update state (match)
                    self.state = if (self.state < 7) usize(7) else usize(10);
                    self.rep[0] = try self.decode_distance(rcoder, len);
                    warn("rep={}, len={}\n", self.rep[0], len);

                    if (self.rep[0] == 0xFFFFFFFF) {
                        if (rcoder.is_finished_ok()) {
                            break;
                        }
                        warn("Found end-of-stream marker but more bytes are available");
                        return error.EndOfStreamButMoreBytes;
                    }
                }

                len += 2;

                const dist = self.rep[0] + 1;
                try self.output.append_lz(len, dist);
            }
                    
            if (self.unpacked_size) |len| {
                if (self.output.len != len) {
                    warn("Expected unpacked size of {} but decompressed to {}", len, self.output.len);
                }
            }

            return;
        }

        pub fn decode_literal(self: *Self, rcoder: *RangeDecoder) !u8 {
            const def_prev_byte: u8 = 0;
            const prev_byte = usize(self.output.last_or(def_prev_byte));

            var result: usize = 1;
            const lit_state =
                ((self.output.len & ((usize(1) << @truncate(u6, self.lp)) - 1))
                 << @truncate(u6, self.lc)) + (prev_byte >> @truncate(u6, 8 - self.lc));
            var probs = &self.literal_probs[lit_state];
            //warn("probs={}, lit_state={}\n", probs, lit_state);

            if (self.state >= 7) {
                var match_byte = usize(try self.output.last_n(self.rep[0] + 1));

                while (result < 0x100) {
                    const match_bit = (match_byte >> 7) & 1;
                    match_byte <<= 1;
                    const bit =
                        try rcoder.decode_bit(&probs[((1 + match_bit) << 8) + result]);
                    result = (result << 1) ^ bit;
                    if (match_bit != bit) {
                        break;
                    }
                }
            }
            
            while (result < 0x100) {
                result = (result << 1) ^ usize(try rcoder.decode_bit(&probs[result]));
            }

            const res = @truncate(u8, result - 0x100);
            //warn("decode_literal={}, {}\n", res, result);
            return res;
        }

        fn decode_distance(self: *Self, rcoder: *RangeDecoder, length: usize) !usize {
            const len_state = if (length > 3) @typeOf(length)(3) else length;
            const pos_slot = usize(try self.pos_slot_decoder[len_state].parse(rcoder));
            //warn("length={}, len_state={}, pos_slot={}\n", length, len_state, pos_slot);
            if (pos_slot < 4) {
                return pos_slot;
            }

            const num_direct_bits = (pos_slot >> 1) - 1;
            var result = (usize(2) ^ (pos_slot & 1)) << @truncate(u6, num_direct_bits);
            //warn("num_direct_bits={}, result={}\n", num_direct_bits, result);

            if (pos_slot < 14) {
                result += usize(
                    try rcoder.parse_reverse_bit_tree(
                        num_direct_bits,
                        &self.pos_decoders,
                        result - pos_slot));
            } else {
                result += usize(try rcoder.get(num_direct_bits - 4)) << 4;
                result += usize(try self.align_decoder.parse_reverse(rcoder));
            }


            warn("result={}\n", result);
            return result;
        }

    };
}

test "LZMAParams.structs" {
    const params: LZMAParams = undefined;

    // lzma.compress("The quick brown foxs jumps over the lazy dog", {"format": "alone"}

    var test_data = "]\x00\x00\x80\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00*\x1a\x08\xa2\x03%f\xf1Kx\xc5\xa2\x05\xff.\xe6\xd9\xd2 \x1a\xb9\n\xaa\xdc\xb6J\x05\xf7LU\x9b\xdc\xd9\x7f\x00\x06Sl\x03;\x9eb\xe9w>\x0c<\xff\xfa~P\x00";

    var result = try LZMAParams.read_header(test_data[0..]);
    warn("{}\n", result);
    warn("{x}\n", test_data[result.pos..]);
    // Now it is probably time to do a range decoder
}

// maybe we were a bit lucky here
test "LZMA.decompress.worked" {
    var test_data = "]\x00\x00\x04\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00*\x1a\x08\xa2\x03%f\xf1Kx\xc5\xa2\x05\xff.\xe6\xd9\xd2 \x1a\xb9\n\xaa\xdc\xb6J\x05\xf7LU\x9b\xdc\xd9\x7f\x00\x06Sl\x03;\x9eb\xe9w>\x0c<\xff\xfa~P\x00";
    const params = try LZMAParams.read_header(test_data[0..]);
    var outbuf = [_]u8{0} ** 256;
    var output = DummyOutStream.new(outbuf[0..]);
    var buffer = [_]u8{0} ** 8192;
    var cb = LZCircularBuffer.from_buffer(output, params.dict_size, buffer[0..]);
    var decoder = Decoder(LZCircularBuffer).init(cb, params);
    var instream = DummyInStream.new(test_data[params.pos .. ]);
    var rycoder = try RangeDecoder.new(&instream);

    try decoder.process(&rycoder);
    try decoder.output.finish();

    warn("decoder.output.stream='{}'\n", decoder.output.stream);
    assert(mem.eql(u8, decoder.output.stream.buf[0..44],
                   "The quick brown foxs jumps over the lazy dog"));
}

test "LZMA.decompress.attempt2" {
    //lzma.compress("The quick brown fox jumps over the lazy dog", {"format": "alone", "level":0})
    var test_data = "]\x00\x00\x04\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00*\x1a\x08\xa2\x03%f\xf1Kx\xc5\xa2\x05\xff.\xe6\xd9\xd2 \x1a\xad4\xf8\xe2\x1d\xe8A6\xfa\xdc\x06i\xbb<\xe4\x104'\t\xeb\xb3f\xec\x1a\x17/\xff\xfc\xce\x90\x00";
    const params = try LZMAParams.read_header(test_data[0..]);
    var outbuf = [_]u8{0} ** 256;
    var output = DummyOutStream.new(outbuf[0..]);
    var buffer = [_]u8{0} ** 8192;
    var cb = LZCircularBuffer.from_buffer(output, params.dict_size, buffer[0..]);
    var decoder = Decoder(LZCircularBuffer).init(cb, params);
    var instream = DummyInStream.new(test_data[params.pos .. ]);
    var rycoder = try RangeDecoder.new(&instream);

    try decoder.process(&rycoder);
    try decoder.output.finish();

    warn("decoder.output.stream='{}'\n", decoder.output.stream);
    assert(mem.eql(u8, decoder.output.stream.buf[0..43],
                   "The quick brown fox jumps over the lazy dog"));
}

test "LZMA.decompress.attempt3" {
    //lzma.compress("dog dog dog dog dog dog dog dog", {"format": "alone", "level":0})
    var test_data = "]\x00\x00\x04\x00\xff\xff\xff\xff\xff\xff\xff\xff\x002\x1b\xc9\x14\x9e\xe3\x0b\x0e\x03\xa7\xff\xfe\xf9\xc0\x00";
    const params = try LZMAParams.read_header(test_data[0..]);
    var outbuf = [_]u8{0} ** 256;
    var output = DummyOutStream.new(outbuf[0..]);
    var buffer = [_]u8{0} ** (32 * 1024);
    var cb = LZCircularBuffer.from_buffer(output, params.dict_size, buffer[0..]);
    var decoder = Decoder(LZCircularBuffer).init(cb, params);
    var instream = DummyInStream.new(test_data[params.pos .. ]);
    var rycoder = try RangeDecoder.new(&instream);

    try decoder.process(&rycoder);
    try decoder.output.finish();

    warn("params={}\n", params);
    warn("decoder.output.stream='{}'\n", decoder.output.stream);
    assert(mem.eql(u8, decoder.output.stream.buf[0..31],
                   "dog dog dog dog dog dog dog dog"));
}

test "LZMA.decompress.attempt4" {
    //lzma.compress("The quick brown fox jumps over the lazy dog", {"format": "alone", "level":6})
    var test_data = "]\x00\x00\x80\x00\xff\xff\xff\xff\xff\xff\xff\xff\x00*\x1a\x08\xa2\x03%f\xf1Kx\xc5\xa2\x05\xff.\xe6\xd9\xd2 \x1a\xad4\xf8\xe2\x1d\xe8A6\xfa\xdc\x06i\xbb<\xe4\x104'\t\xeb\xb3f\xec\x1a\x17/\xff\xfc\xce\x90\x00";
    const params = try LZMAParams.read_header(test_data[0..]);
    var outbuf = [_]u8{0} ** 256;
    var output = DummyOutStream.new(outbuf[0..]);
    var buffer = [_]u8{0} ** (32 * 1024);  // probably needs to use params.dict_size;
    var cb = LZCircularBuffer.from_buffer(output, params.dict_size, buffer[0..]);
    var decoder = Decoder(LZCircularBuffer).init(cb, params);
    var instream = DummyInStream.new(test_data[params.pos .. ]);
    var rycoder = try RangeDecoder.new(&instream);

    try decoder.process(&rycoder);
    try decoder.output.finish();

    warn("params={}\n", params);
    warn("decoder.output.stream='{}'\n", decoder.output.stream);
    assert(mem.eql(u8, decoder.output.stream.buf[0..43],
                   "The quick brown fox jumps over the lazy dog"));
}

test "LZMA.decompress.attempt5" {
    //lzma.compress("The quick brown fox jumps over the lazy dog, The quick brown fox jumps over the lazy dog",
    //              {"format": "alone", "level":9})
    var test_data = "]\x00\x00\x00\x04\xff\xff\xff\xff\xff\xff\xff\xff\x00*\x1a\x08\xa2\x03%f\xf1Kx\xc5\xa2\x05\xff.\xe6\xd9\xd2 \x1a\xad4\xf8\xe2\x1d\xe8A6\xfa\xdc\x06i\xbb<\xe4\x104'\t\xeb\xb3f\xe3\xd4q:\xfaH\x93\t\xa7\xff\xfak`\x00";
    const params = try LZMAParams.read_header(test_data[0..]);
    var outbuf = [_]u8{0} ** 256;
    var output = DummyOutStream.new(outbuf[0..]);
    var buffer = [_]u8{0} ** (32 * 1024);  // probably needs to use params.dict_size;
    var cb = LZCircularBuffer.from_buffer(output, params.dict_size, buffer[0..]);
    var decoder = Decoder(LZCircularBuffer).init(cb, params);
    var instream = DummyInStream.new(test_data[params.pos .. ]);
    var rycoder = try RangeDecoder.new(&instream);

    try decoder.process(&rycoder);
    try decoder.output.finish();

    warn("params={}\n", params);
    warn("decoder.output.stream='{}'\n", decoder.output.stream);
    assert(mem.eql(u8, decoder.output.stream.buf[0..43+43+2],
                   "The quick brown fox jumps over the lazy dog, The quick brown fox jumps over the lazy dog"));
}

test "LZMA.decompress.attempt6" {
    var test_data = "^\x00\x00\x00\x04\xff\xff\xff\xff\xff\xff\xff\xff\x00*\x1a\x08\xa2\x03%H%\xcc\xda\x81I\xba\xca\xb6\xacBAB\xd4\xd4=)\xa4R\x19t\xbd\xcb\xfb\xc0\xb9A\xb9\xeatE8\x92\xa5\xe1\x98\xc4\x04\xe10\xb4\xd8\xff\xb4Z\x9e?\xff\x82\xd3\x00\x00";
    const params = try LZMAParams.read_header(test_data[0..]);
    var outbuf = [_]u8{0} ** 256;
    var output = DummyOutStream.new(outbuf[0..]);
    var buffer = [_]u8{0} ** (32 * 1024);  // probably needs to use params.dict_size;
    var cb = LZCircularBuffer.from_buffer(output, params.dict_size, buffer[0..]);
    var decoder = Decoder(LZCircularBuffer).init(cb, params);
    var instream = DummyInStream.new(test_data[params.pos .. ]);
    var rycoder = try RangeDecoder.new(&instream);

    try decoder.process(&rycoder);
    try decoder.output.finish();

    warn("params={}\n", params);
    warn("decoder.output.stream='{}'\n", decoder.output.stream);
    assert(mem.eql(u8, decoder.output.stream.buf[0..43+43+2],
                   "The quick brown fox jumps over the lazy dog, The quick brown fox jumps over the lazy dog"));
}


test "LZMA.decompress.attempt7" {
    //lzma.compress(conents of rangecoder.zig,
    //              {"format": "alone", "level":9, "lc":4})
    var test_data = [_]u8{0x5d,0x00,0x00,0x80,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x17,0xe0,
                          0x7c,0x5a,0x2c,0x19,0x95,0x14,0xf7,0x79,0xb8,0xa0,0x8b,0x06,0xb2,0xad,0x8e,0x5a,
                          0x5f,0xef,0x6f,0x9d,0x4b,0x67,0x06,0xc5,0xa0,0x0c,0xfb,0x1c,0x75,0x6c,0x40,0x8b,
                          0x07,0x98,0xeb,0xca,0xcc,0x6a,0x60,0x00,0xe5,0xa1,0x35,0xdf,0x84,0x3f,0xac,0x8a,
                          0x77,0xfe,0x75,0x22,0x9c,0xad,0xc7,0x18,0x10,0x25,0x35,0x6f,0x41,0x6d,0xa9,0x37,
                          0xbb,0x05,0xe8,0xf2,0x7a,0x3c,0x27,0x40,0x05,0x4b,0xcf,0x49,0xf8,0xf9,0x40,0x55,
                          0x9d,0xce,0x75,0xa1,0x58,0x6a,0x49,0xb6,0x3d,0x78,0x19,0xa7,0xb6,0x22,0x24,0x0f,
                          0xb3,0x98,0x5f,0x13,0x59,0x57,0x19,0xa3,0x5f,0x84,0xb3,0x7b,0xf9,0x2f,0x5b,0xa2,
                          0xc7,0xfc,0xe0,0x67,0x6e,0x44,0x6e,0x30,0x03,0x27,0xef,0x1e,0x9d,0xd6,0xbc,0xe3,
                          0xb4,0xc8,0x10,0x8c,0x63,0x0e,0xfa,0xc5,0x49,0x36,0xd0,0xd4,0xbc,0xf0,0xa1,0x24,
                          0xa3,0x84,0xd6,0x76,0x9b,0xe1,0x1c,0x22,0x65,0x03,0x1c,0xa1,0x1a,0xf6,0x02,0x86,
                          0xbc,0x82,0xcf,0xbf,0x0e,0x29,0xe8,0x2f,0x3f,0x8c,0x38,0x99,0x1c,0xb0,0x09,0x5a,
                          0x09,0xe2,0x21,0x82,0xab,0x26,0x41,0x7e,0x83,0x29,0x1c,0x6c,0x42,0xfa,0x6c,0x13,
                          0x73,0xae,0x45,0x1a,0xb1,0xae,0xc1,0x36,0x30,0x7b,0x2d,0xf2,0x53,0xa5,0xbf,0x91,
                          0xe9,0x15,0x1a,0xba,0x48,0x60,0xed,0x33,0x50,0x37,0x07,0xd5,0x9a,0x46,0x17,0xad,
                          0x01,0xf9,0x22,0x78,0xfd,0x92,0x2c,0xd4,0x10,0x9e,0x74,0x40,0x9f,0x13,0x3b,0x07,
                          0x10,0xa2,0x98,0x39,0xf8,0x83,0xa3,0xbf,0xf0,0xd1,0xca,0xb3,0xd3,0x25,0x82,0xb0,
                          0x86,0xe5,0x66,0x59,0x2d,0x69,0x30,0x7b,0xf9,0xa4,0x97,0xfb,0x2f,0xe9,0x52,0x58,
                          0xfe,0x3f,0xcc,0x03,0x40,0xff,0x3b,0xa4,0xd1,0x13,0x09,0xdd,0x40,0x98,0xdc,0x41,
                          0xbf,0x0f,0xb6,0x5b,0x1f,0xc0,0x81,0x95,0xa5,0xe9,0x91,0xf8,0xda,0x73,0xdd,0x9b,
                          0x0a,0x6d,0x3e,0x8a,0xca,0xb7,0x51,0x85,0x05,0x85,0xf6,0xc1,0xcc,0x9d,0xc6,0xbe,
                          0x3f,0x0d,0x01,0xd6,0xaa,0xff,0x3f,0x8e,0x78,0x60,0x88,0xe1,0x89,0xbc,0x78,0x29,
                          0xb0,0xaa,0xfc,0xe9,0xd0,0xec,0xbb,0x8f,0xa1,0x49,0x64,0x99,0x4f,0xbc,0x42,0xc5,
                          0xd5,0x01,0x0d,0x83,0xb4,0x97,0xc3,0x38,0xf6,0xab,0x05,0x82,0x74,0x28,0xb0,0xbb,
                          0xea,0x2d,0x0f,0xab,0xc6,0x36,0x3a,0x3b,0xb2,0x17,0xc9,0x51,0xde,0x8f,0xf6,0x27,
                          0x27,0x3e,0xbd,0xf8,0xbe,0x36,0x7e,0xea,0x3a,0x91,0xf6,0x44,0xc2,0x79,0xa8,0xbe,
                          0xf4,0xf0,0x85,0xed,0x49,0x6c,0x51,0xab,0xa0,0xe4,0xd4,0x52,0x37,0x77,0xcc,0x5c,
                          0x51,0xa9,0x9e,0x60,0x20,0x18,0x10,0x0b,0x49,0x12,0xd4,0x8e,0xe2,0xb3,0x0e,0x71,
                          0xd9,0x84,0x44,0xd5,0x35,0x5d,0xa3,0x74,0x20,0xe7,0x45,0x64,0xef,0xf1,0x57,0x4b,
                          0xa6,0x84,0x3d,0x8d,0x9d,0xe5,0xd1,0xdb,0x18,0xd7,0x17,0xf9,0xa5,0x41,0x90,0x9e,
                          0x13,0xcc,0x82,0x5b,0x0b,0x36,0xaa,0xa8,0xb5,0xb7,0xa2,0x00,0xee,0xe4,0x92,0x47,
                          0x2b,0x2e,0x6a,0x94,0x3c,0x5c,0x97,0x5c,0xc2,0xc4,0xb6,0x48,0xd6,0x67,0x4d,0x70,
                          0x0c,0x35,0xb5,0x2e,0x96,0xba,0xee,0xdf,0x61,0x17,0xd4,0x61,0x65,0x06,0x9b,0xa9,
                          0xb6,0xd0,0xea,0xee,0xfa,0x5a,0x59,0x40,0x9d,0xeb,0xb1,0x38,0x38,0xc4,0x96,0x7c,
                          0x08,0x59,0xee,0xb6,0x30,0x1b,0x97,0xea,0x7a,0x7f,0x46,0x63,0xd2,0x80,0xd8,0x90,
                          0x46,0xa8,0x3a,0xa1,0xa5,0xa1,0xff,0x93,0x9f,0x31,0xb0,0xa5,0x34,0x2c,0x70,0xda,
                          0x8f,0x1c,0xe0,0x7f,0xa1,0x56,0xbf,0x28,0xa5,0x4f,0x04,0x06,0x13,0x14,0x1c,0xe7,
                          0xad,0x65,0x41,0x9e,0x8d,0x70,0x7e,0xd9,0xf0,0x09,0x6d,0xa3,0xef,0x8d,0xc1,0x96,
                          0xd0,0x9a,0xe0,0x85,0x7f,0x74,0xfa,0xc7,0x95,0x1c,0xb7,0x00,0xf6,0x04,0xa4,0x36,
                          0x9c,0xfc,0x7c,0x6a,0xf7,0xb4,0x7a,0x1c,0x8d,0xca,0xd3,0x86,0x9c,0x61,0xe0,0x16,
                          0xe9,0x40,0x57,0xbd,0xba,0xb3,0x4e,0x3e,0xb1,0xf6,0x0c,0xb6,0x09,0xdc,0x7b,0xbc,
                          0x99,0x5c,0x8e,0x3c,0xf4,0xd2,0x8a,0x98,0xe1,0xc7,0xc0,0x52,0x08,0x25,0x45,0x59,
                          0x00,0x3b,0x8a,0xc4,0xff,0xfb,0x0a,0x73,0xee,0xf3,0xe8,0xba,0xe5,0xe5,0x02,0xc3,
                          0xf3,0x30,0xff,0xaf,0x4d,0x4d,0x64,0x24,0x92,0x44,0x0a,0x54,0x72,0xb7,0x91,0x99,
                          0xc5,0x0a,0xc0,0xb0,0x69,0x3a,0xfc,0xbc,0xcf,0x4d,0x0f,0x29,0x1f,0xb0,0x4c,0x30,
                          0xa5,0x7f,0x51,0x3f,0xf7,0x9e,0x72,0xec,0x98,0x56,0x4e,0x52,0xdb,0xce,0xca,0x50,
                          0x01,0xaf,0x4e,0x13,0xf4,0xba,0x5f,0x8c,0x7f,0xff,0x22,0xa6,0xa3,0x69,0x9a,0xc5,
                          0xde,0xcf,0x7b,0x6f,0x62,0x1a,0x96,0x0d,0x4c,0x50,0x19,0xab,0x7f,0x72,0xc4,0x11,
                          0x07,0xb6,0x91,0x2b,0xbe,0x14,0x11,0x12,0x12,0x80,0x9d,0xae,0x9a,0xd0,0x13,0x2c,
                          0x94,0xb0,0x77,0x0d,0x1f,0xd0,0x4a,0xa2,0x84,0x64,0x04,0x15,0x07,0xe8,0x46,0x66,
                          0x20,0x61,0xcd,0x45,0x67,0x1d,0xb7,0x7c,0x08,0x39,0x11,0x24,0x93,0x50,0x2e,0xce,
                          0x76,0x49,0x68,0x96,0x3c,0xf2,0x35,0x5f,0xe2,0x75,0x7b,0xf3,0x82,0x7e,0xe5,0xa1,
                          0xb4,0x62,0xd5,0x1b,0xd2,0x63,0xa8,0x64,0xa9,0xa7,0x2d,0x39,0x25,0x22,0xce,0xb3,
                          0xe0,0xfb,0x8a,0x91,0x52,0x98,0xda,0xfa,0x23,0x57,0xf2,0xb8,0x19,0xbd,0x1d,0x5b,
                          0x8b,0x2f,0x59,0x59,0xca,0xf9,0xba,0x50,0xd4,0xd3,0xf7,0xc0,0x66,0xf3,0x81,0xd4,
                          0x6f,0x1b,0x1a,0x81,0x8c,0x3d,0xf8,0x79,0x14,0x59,0xce,0x2b,0xd1,0x2e,0xcd,0x1b,
                          0x27,0x8a,0xc2,0x0f,0x94,0xb8,0xcd,0xa5,0x53,0xf9,0x6e,0x96,0xf4,0x1e,0x1d,0x06,
                          0xf7,0x7b,0xf6,0x1a,0x7f,0xc6,0x87,0x95,0xd4,0x97,0xb9,0x2a,0x22,0x68,0xec,0x61,
                          0xc3,0x62,0x0d,0x4e,0xa0,0x41,0x75,0x58,0xe3,0x7c,0xb8,0x6f,0x7a,0xaa,0x44,0x7b,
                          0xef,0x9a,0x7c,0x28,0x13,0xd5,0x60,0x74,0x66,0xf2,0x92,0x19,0xe0,0x3c,0xa0,0x7b,
                          0xf3,0x53,0x9e,0xc1,0x2a,0x3d,0x4e,0xbb,0xe7,0xee,0x5f,0x84,0x02,0xfd,0x11,0xea,
                          0x13,0x93,0x88,0x94,0x26,0x6e,0x64,0xdd,0x4d,0x58,0x66,0xd9,0x53,0xb0,0x78,0x13,
                          0xcb,0xca,0x51,0x0d,0x4d,0x4c,0x88,0x4d,0x1c,0x86,0x6d,0xe7,0xbf,0x9b,0xec,0x86,
                          0x19,0xd1,0x88,0xf7,0x78,0xd4,0x02,0xdd,0x38,0x44,0x6c,0x07,0x05,0x68,0x8d,0x77,
                          0x98,0x51,0xe0,0x4d,0x77,0x05,0x91,0x75,0xa2,0xe6,0x8e,0x9d,0x7b,0x78,0x2c,0x58,
                          0x09,0x8a,0x6f,0x22,0x7b,0x80,0x53,0x46,0xc3,0xf0,0x71,0x31,0x64,0xf5,0xc3,0x3c,
                          0x42,0x2c,0x3b,0x22,0x23,0x3e,0x4e,0xdd,0xb2,0x0e,0x91,0xb9,0x42,0xea,0x63,0xaa,
                          0x2b,0x68,0x66,0x63,0x29,0x21,0x62,0xca,0x2c,0xfa,0x4c,0x6f,0xf8,0xd4,0x1f,0x0b,
                          0x68,0x92,0x73,0x64,0xd6,0x15,0xaf,0x9d,0xf9,0x5b,0x77,0x81,0x48,0xf6,0x81,0xb3,
                          0xe2,0xc0,0xbf,0x40,0xeb,0x24,0x04,0x51,0x34,0x6d,0xe4,0x6b,0x88,0x7b,0x44,0x13,
                          0xd0,0xa8,0xaf,0xfb,0x8a,0xcd,0x93,0x07,0x12,0xef,0x5d,0xc5,0xbe,0x9c,0x3e,0xf7,
                          0x9d,0x6b,0x54,0xed,0x11,0xcb,0xa7,0x0e,0x2d,0xb5,0x05,0xa2,0x0d,0x78,0x7b,0x55,
                          0x2c,0x85,0x99,0x87,0xb0,0x6d,0xcd,0x13,0x08,0x9d,0xcc,0xf7,0xb9,0xc3,0x8f,0xee,
                          0x62,0x12,0x0d,0xc0,0x7b,0x3b,0x2c,0x76,0x61,0xb1,0x5a,0x12,0xbf,0x99,0xaf,0x11,
                          0x41,0x59,0x00,0x4e,0xeb,0xf7,0x72,0x52,0xdd,0x99,0x18,0xf1,0x86,0x8f,0xb6,0xb6,
                          0x27,0xb9,0xb3,0x6f,0x2f,0x58,0x93,0x5c,0x48,0x0d,0x36,0x1e,0x30,0x11,0x89,0xf2,
                          0x8e,0x58,0x63,0x65,0x79,0xb8,0xf2,0xeb,0x8d,0xd9,0x37,0x13,0x7b,0xa0,0x01,0xad,
                          0x97,0x19,0xc0,0x72,0x17,0x13,0x22,0xb5,0x84,0xaf,0xdf,0x1c,0x88,0xa1,0x66,0xbc,
                          0x13,0x20,0x44,0x2f,0x51,0x8d,0xab,0x08,0x09,0x98,0x9a,0x72,0x05,0x91,0xfc,0x4e,
                          0x6b,0xf0,0x29,0x96,0x0c,0x4f,0x87,0xf9,0xe1,0x26,0x8d,0xf8,0xe5,0xf9,0xcf,0xd4,
                          0x66,0x39,0x2e,0xe0,0x79,0xb7,0x85,0xf9,0xdd,0x77,0xd6,0xd2,0x74,0xcb,0x8d,0xec,
                          0x1d,0xeb,0xce,0x6c,0x80,0x0e,0x27,0x58,0x49,0xdf,0x0e,0xe1,0x13,0x9d,0x9a,0xc6,
                          0xdc,0x68,0xdb,0x0b,0xdb,0xca,0x67,0x89,0x34,0xb4,0xb9,0x65,0xae,0xd0,0x29,0x33,
                          0x0d,0xbf,0x52,0xcb,0xb6,0xdc,0x30,0xd3,0xbd,0x01,0x09,0x26,0x4d,0xdf,0xc4,0xfa,
                          0xb5,0x1c,0x9c,0xf2,0xa1,0xd4,0xad,0xe9,0xb0,0x3a,0xf0,0x38,0x96,0xad,0xca,0x3f,
                          0xc1,0x71,0x15,0x84,0xb3,0x49,0xf7,0xe7,0x27,0x99,0xf4,0x7d,0xd8,0x2d,0x3d,0xf4,
                          0xef,0x3d,0x38,0x0d,0xba,0x14,0x10,0x6f,0x5e,0x75,0xa9,0xd9,0x0a,0xff,0xca,0x62,
                          0xb3,0x2e,0x4c,0xc3,0x75,0xae,0xa0,0x39,0x81,0x7e,0x5e,0x60,0xfe,0x41,0x31,0xa6,
                          0x43,0xea,0x1c,0x8a,0x2d,0x1a,0x81,0x66,0x58,0xa6,0xe4,0xc4,0x29,0xce,0x55,0x21,
                          0xbc,0x1f,0xba,0xd6,0xe2,0xa4,0xae,0x9b,0xf5,0xf1,0xe3,0xea,0x1b,0x6c,0x6c,0x35,
                          0x20,0xef,0xd2,0xb3,0x23,0x3d,0xe9,0xe9,0x8c,0x1b,0x15,0x0b,0x8d,0xdf,0x35,0xec,
                          0x4f,0xae,0xa4,0xfc,0x05,0xb0,0x39,0x83,0x6c,0xe0,0x8d,0x03,0x2c,0x90,0x81,0x94,
                          0x4c,0xd0,0xe7,0x24,0x74,0x37,0x38,0x97,0x4a,0xbf,0x40,0x50,0x71,0x4b,0x8a,0x67,
                          0xb9,0x14,0x7a,0x16,0xb0,0xa7,0x9d,0x5b,0x5e,0x18,0x24,0xc0,0x8e,0x75,0x5f,0xa8,
                          0x08,0x82,0x5d,0xd5,0x42,0xda,0x07,0x98,0xab,0x4b,0xbc,0xa8,0xbc,0x9b,0x35,0x77,
                          0x4d,0x36,0x8c,0x47,0x74,0x90,0xe7,0x52,0x7c,0x0c,0xec,0x55,0x76,0x92,0xfd,0x17,
                          0x56,0x41,0x4c,0x2c,0x11,0x1a,0xe1,0x28,0x62,0x2f,0x73,0xea,0x83,0xa2,0x10,0xbc,
                          0xc1,0x05,0x96,0xb7,0x24,0xb2,0x95,0x98,0xd6,0x72,0x6c,0x3f,0x1e,0xab,0xfa,0xf5,
                          0x6d,0xf6,0x56,0x4f,0x04,0xe9,0x7b,0x20,0x69,0x8e,0x9d,0x98,0x50,0x8e,0xe9,0xd4,
                          0xa4,0xe4,0x7b,0x06,0x36,0x86,0x4e,0x64,0xee,0xae,0x08,0x33,0xd4,0x85,0x44,0x42,
                          0x5b,0x3d,0x83,0xa7,0x3f,0x24,0x5d,0x47,0x1d,0x0a,0xa4,0x0d,0x62,0x11,0xbc,0x0f,
                          0x5e,0x8e,0x3e,0x58,0x65,0x89,0x45,0xc5,0x27,0x46,0x05,0xfd,0x87,0x99,0xca,0x41,
                          0x00,0xf7,0xb8,0xbd,0xf3,0x7e,0xa7,0xd9,0x1c,0xa3,0x9a,0xff,0xce,0xcc,0x06,0x2b,
                          0x83,0xb4,0x7b,0x2d,0x56,0xff,0xb1,0x29,0x10,0xb9,0x28,0x88,0xf4,0xd0,0x6b,0xa3,
                          0xe8,0x21,0x5e,0x40,0xe4,0xdc,0x8f,0x39,0xb4,0xe8,0x57,0xd1,0x11,0xbc,0x49,0x29,
                          0xe8,0x4a,0xb4,0xbd,0xa0,0xc6,0x58,0xaf,0x84,0xcb,0xec,0xf5,0x97,0xf5,0x50,0xcf,
                          0x5f,0x93,0x2c,0xe4,0x7d,0xc9,0xfb,0x46,0x33,0x67,0x47,0x99,0x17,0xa3,0xc2,0x4f,
                          0x93,0x26,0x6a,0xd3,0xd3,0x3b,0xb9,0x8e,0x45,0x0f,0xc6,0xb3,0xed,0x41,0xb6,0x92,
                          0x4d,0x44,0x03,0x6b,0xfc,0x33,0x91,0x64,0xba,0xd0,0xf6,0xba,0xdd,0x4a,0x86,0xac,
                          0x0e,0x14,0xf9,0xc4,0x0b,0xb2,0xb5,0x7e,0x88,0xa2,0x76,0x9a,0x26,0x73,0xce,0xfb,
                          0x18,0x9d,0x52,0x08,0x91,0x66,0x2d,0x76,0x7f,0x0d,0xa0,0xc2,0x85,0x6e,0xe6,0xf1,
                          0xa8,0xea,0xc9,0xee,0xb5,0x8d,0xdd,0xd3,0x86,0x5e,0x09,0xdc,0x27,0xe3,0xae,0xad,
                          0x36,0xf7,0xac,0x87,0x76,0xc1,0x14,0x30,0x17,0xb7,0x7a,0x99,0x0a,0x3c,0xda,0x72,
                          0x36,0xa4,0xe4,0xf0,0x16,0x1b,0xcb,0xb0,0x8d,0x08,0x66,0xaf,0xd4,0x15,0x63,0x1b,
                          0xb0,0xc4,0xb8,0xe1,0xe5,0x2d,0x38,0x16,0x4e,0x94,0x66,0x7e,0x6d,0x02,0x06,0xe4,
                          0xbc,0x64,0x86,0xc8,0xcc,0x3c,0xc8,0xd6,0x45,0x0e,0x9a,0xe3,0x00,0xc4,0xd5,0xf0,
                          0xe1,0xf7,0x8b,0x30,0x56,0xfd,0xa0,0xc2,0x5e,0xba,0x44,0x53,0x99,0x1e,0x69,0x64,
                          0xe8,0xa8,0x38,0x92,0x59,0x32,0x60,0x29,0x63,0x77,0x50,0xbc,0xb7,0x7d,0xd3,0x6e,
                          0x76,0x0e,0x32,0xb0,0x5d,0x65,0xa9,0x16,0xa8,0x2d,0x31,0xfa,0x53,0xec,0xe5,0xf6,
                          0x99,0x6a,0xc7,0x32,0x8d,0xdb,0x9b,0xca,0x00,0xb5,0x77,0x86,0x8e,0xf9,0x61,0x80,
                          0x63,0x8b,0x3f,0x4f,0x13,0x71,0x52,0x30,0xf9,0xf5,0x9c,0x01,0x8a,0x17,0x1c,0x7b,
                          0x95,0x2b,0xad,0x74,0x50,0x22,0x79,0x38,0x44,0xe9,0xec,0x70,0xed,0xa1,0xe8,0x30,
                          0xc3,0xf6,0x3c,0xf5,0xaa,0xf1,0xf4,0x37,0x1c,0x23,0x16,0xb2,0x46,0xd9,0x1b,0x8b,
                          0x1e,0x2d,0x77,0x90,0xa7,0xe4,0xda,0x78,0x02,0x21,0x83,0x72,0x99,0x7a,0x0a,0xc0,
                          0x58,0x14,0x37,0xed,0xdb,0xbc,0xa4,0x75,0x52,0x02,0xf1,0x4a,0xaa,0x52,0x7b,0x32,
                          0xcf,0x72,0xbc,0xb8,0x49,0xbc,0x50,0x0f,0xfe,0x96,0xdd,0x58,0x6c,0x87,0x84,0xff,
                          0xf2,0x5f,0xf2,0x8c,
                          };
    const params = try LZMAParams.read_header(test_data[0..13]);
    var outbuf = [_]u8{0} ** 8192;
    var output = DummyOutStream.new(outbuf[0..]);
    var buffer = [_]u8{0} ** (32 * 1024);  // probably needs to use params.dict_size;
    var cb = LZCircularBuffer.from_buffer(output, params.dict_size, buffer[0..params.dict_size]);
    var decoder = Decoder(LZCircularBuffer).init(cb, params);
    var instream = DummyInStream.new(test_data[params.pos .. ]);
    var rycoder = try RangeDecoder.new(&instream);

    try decoder.process(&rycoder);
    try decoder.output.finish();

    warn("params={}\n", params);
    warn("decoder.output.stream='{}'\n", decoder.output.stream);
    // assert(mem.eql(u8, decoder.output.stream.buf[0..43+43+2],
    //                "The quick brown fox jumps over the lazy dog, The quick brown fox jumps over the lazy dog"));
}

test "LZMA.decompress.attempt7" {
    //lzma.compress(contents of lzma.zig,
    //              {"format": "alone", "level":9, "lc":4})
    var test_data = [_]u8{0x5d,0x00,0x00,0x80,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x17,0xe0,
                          0x7c,0x5a,0x2c,0x19,0x95,0x17,0x24,0x28,0xf9,0x52,0x14,0xfa,0xb3,0xb5,0x7b,0x8a,
                          0xf4,0xa6,0x86,0x5f,0x1d,0x57,0x22,0xcf,0x7f,0x51,0x9f,0xff,0x4f,0xc1,0x61,0xfb,
                          0x87,0x7f,0xee,0xe0,0xd9,0x94,0xab,0xee,0x68,0x50,0x0c,0x1a,0x51,0x9b,0x11,0x7b,
                          0x8e,0x59,0x2c,0x54,0xe8,0x05,0x62,0xed,0x98,0x90,0xda,0x79,0x7b,0x21,0x8d,0x92,
                          0xc0,0x67,0xff,0xf8,0x3a,0x28,0xcd,0x23,0x82,0xde,0x7d,0x73,0xf2,0x6a,0x11,0x45,
                          0x24,0x22,0x8f,0xd9,0xe4,0xd1,0x24,0xa4,0xb6,0x05,0xed,0x46,0xd9,0x63,0x12,0x44,
                          0x21,0x56,0x14,0x70,0xdb,0x74,0xc5,0x97,0x66,0xc9,0x69,0x80,0xa1,0x76,0x4e,0x2a,
                          0x57,0x93,0x61,0xe9,0x94,0xb5,0x49,0xf7,0x26,0x20,0x2d,0x44,0x39,0xe6,0x06,0x26,
                          0x10,0x57,0xb0,0xac,0x2b,0xd5,0x72,0xcb,0xb8,0x4a,0xc7,0xbd,0xb4,0x64,0xf1,0xf7,
                          0xff,0x16,0x7d,0x7f,0x9f,0x0d,0x7e,0x54,0x03,0x43,0x33,0x77,0x0d,0x1e,0x84,0x53,
                          0x31,0xf8,0xb0,0x12,0xe7,0x86,0x81,0xef,0x82,0x3e,0xe0,0xf7,0x48,0xe8,0xba,0x30,
                          0x3a,0xa8,0x07,0x03,0x21,0x78,0x96,0x28,0x72,0x5a,0x62,0xbf,0x92,0xd2,0x01,0x8a,
                          0xd9,0xbc,0x9f,0x76,0x2d,0x3a,0x20,0xb7,0x60,0x3c,0x0e,0x6a,0x96,0xa5,0x04,0x10,
                          0x9b,0xab,0x4d,0x9c,0x57,0x91,0x69,0xff,0x29,0xd8,0x68,0xac,0x35,0x2d,0x4d,0x21,
                          0x32,0x47,0xb7,0xe6,0x2a,0x32,0x58,0x40,0x7d,0xb7,0x36,0xc5,0xb0,0x81,0xb7,0x52,
                          0xb4,0x28,0x96,0x9c,0x6b,0xd5,0x4e,0x73,0x49,0xfc,0x5c,0x48,0xb5,0x26,0x8a,0xbf,
                          0x1c,0x57,0x96,0x40,0x5f,0x67,0xc6,0xab,0x60,0x84,0xe4,0x88,0x52,0x2b,0x97,0x46,
                          0x88,0x9c,0xeb,0x15,0xf1,0xeb,0x1b,0x97,0x6e,0x9e,0x6c,0xa7,0xe8,0x41,0x7d,0x68,
                          0x24,0xf4,0xa0,0x24,0x22,0x77,0x9a,0x75,0xa8,0x63,0xbf,0x42,0xf6,0x69,0x65,0x93,
                          0x36,0x2e,0xc3,0x1d,0x20,0x3f,0xe7,0x33,0x58,0x07,0x1b,0x19,0xbb,0xf1,0x06,0xb6,
                          0x59,0x31,0x35,0xa2,0x90,0xe1,0xdb,0x66,0x57,0x4f,0xdb,0x19,0x0e,0xd5,0xa6,0x84,
                          0xcc,0x84,0x02,0x91,0x3e,0x1c,0x5d,0x3d,0x5d,0x84,0x32,0xc4,0x5c,0x78,0x7a,0xfc,
                          0x23,0xfc,0x48,0xe7,0x8e,0x7b,0x53,0xae,0xcf,0x60,0x1d,0x8f,0xf3,0xaa,0xd1,0xd2,
                          0xbf,0xce,0x3a,0xf7,0xfe,0x12,0xe3,0xa5,0x27,0xbb,0x98,0x75,0x08,0x81,0x71,0xe4,
                          0x6b,0xcd,0xc5,0x6e,0x6c,0xb4,0x02,0x0b,0xe0,0xee,0x57,0x3d,0xa9,0xe2,0x4a,0x42,
                          0xf5,0x05,0xd0,0x6e,0xc0,0xca,0x5d,0x57,0xb6,0x9f,0x5b,0x4c,0xd1,0x61,0x60,0x72,
                          0xf2,0xb4,0xc0,0x24,0xd0,0xe9,0xc3,0x29,0x3d,0x00,0x7e,0xfb,0x01,0x9a,0xf1,0x94,
                          0x75,0xa4,0xb7,0xf9,0xec,0xd7,0xbb,0x8a,0xcd,0xc6,0x3f,0x65,0x80,0x22,0xc7,0x38,
                          0xeb,0x9c,0xc4,0x45,0x80,0x71,0xad,0xe5,0xb6,0x61,0x5c,0x32,0xf1,0x73,0x31,0x03,
                          0x88,0x6e,0x30,0xb5,0x71,0x6c,0xbb,0x0e,0xae,0xfd,0x5b,0xcf,0xc2,0x13,0xd8,0xff,
                          0x66,0x68,0xcb,0xfc,0xb0,0xa7,0x0a,0x68,0x13,0x01,0x51,0xc1,0xee,0xda,0xa7,0x8e,
                          0xac,0xfd,0x61,0x12,0x32,0x48,0x9f,0xbd,0x65,0xc2,0xd2,0x8c,0x0d,0x43,0xb2,0x96,
                          0x25,0x8e,0x73,0x5a,0x2c,0x86,0xdc,0x4a,0xfd,0x61,0xdd,0x6a,0x7c,0x52,0x2c,0x1d,
                          0xa6,0x53,0xa2,0x23,0x00,0x2f,0xf3,0x60,0x7f,0xf4,0x6f,0xc6,0x6e,0x05,0x31,0xe4,
                          0x8f,0x0e,0x5f,0x1e,0x5d,0x69,0x4e,0x78,0x33,0xee,0xed,0x8d,0x78,0xd5,0xb8,0x41,
                          0xec,0x5c,0x3d,0x85,0x4f,0x30,0xf3,0xee,0x32,0x32,0x9a,0xc3,0x67,0x01,0x21,0x6e,
                          0x24,0x86,0x4d,0xb5,0x1f,0x3e,0x8a,0x6e,0x6f,0xe1,0x7d,0x18,0x8a,0x8d,0x42,0xb3,
                          0xa4,0x1a,0xe7,0x14,0x41,0x4f,0xe1,0x0f,0x88,0x84,0x7d,0xfb,0xb3,0x99,0x89,0x9a,
                          0x73,0xf3,0xf7,0x33,0x4f,0x25,0x3e,0x46,0xb8,0xf5,0x2f,0xf7,0x3c,0x73,0x5a,0x77,
                          0xc9,0x8c,0xf5,0x69,0x74,0x83,0xda,0x6c,0x40,0xbb,0x40,0xb9,0x7e,0x51,0xa9,0xcc,
                          0x6c,0x5e,0xbc,0x5b,0x7d,0x4f,0xca,0xe1,0xd3,0xf4,0x05,0xa7,0xa8,0x16,0x7e,0xa3,
                          0xa0,0xcc,0x25,0xd6,0xa7,0xbd,0xd0,0xc1,0x2d,0xb4,0x1a,0x1f,0x94,0xa5,0x1a,0xc2,
                          0x8d,0x75,0x65,0x33,0x3e,0xf2,0x2c,0x10,0x65,0xd2,0x03,0x95,0xc1,0x43,0x45,0xd1,
                          0x67,0x54,0x7f,0xc4,0x1e,0x94,0x68,0x5f,0x6f,0x40,0x1c,0xb9,0xa9,0xc2,0x55,0x2f,
                          0x93,0x74,0x8a,0x92,0x3c,0x3c,0xa7,0xde,0x50,0x78,0xa7,0xf5,0x18,0xf8,0xf9,0xe1,
                          0x8c,0xb4,0xc2,0x64,0x66,0x4b,0xa0,0x4c,0xbc,0xfc,0xf3,0xa9,0x07,0x2c,0xe6,0x74,
                          0xec,0x26,0x74,0xe0,0x6c,0xf5,0x4e,0xf3,0x69,0x7d,0x6b,0x11,0x46,0xcc,0x66,0x58,
                          0x43,0x37,0x43,0x6e,0x57,0xbb,0x60,0x24,0xd3,0xcf,0x4d,0xa7,0xdb,0xbd,0x0d,0xec,
                          0x2c,0x0f,0x17,0xae,0x89,0x96,0xb4,0x28,0xb5,0x09,0x69,0x87,0xfb,0xbb,0x43,0x8f,
                          0x9e,0x06,0x3c,0x55,0x1a,0x76,0x8d,0x92,0x6c,0xcb,0xae,0xbf,0x1b,0xc7,0x07,0xb3,
                          0xa0,0xb1,0x62,0x5c,0xa4,0xc8,0xb2,0xb7,0xd3,0x31,0x2d,0xdc,0x94,0xc4,0x1a,0xc1,
                          0xb5,0xb5,0xb7,0x02,0x42,0x95,0xec,0x95,0x38,0x82,0xa0,0x1d,0xd8,0xb7,0xbc,0xc9,
                          0xdc,0xa1,0xb3,0x8a,0x55,0x20,0x57,0x31,0x92,0x33,0x8d,0xc5,0x2a,0x98,0xff,0x36,
                          0x76,0x01,0x86,0x4b,0x30,0x48,0xaf,0xd1,0x9e,0x7d,0x54,0x37,0x53,0x6a,0x39,0x28,
                          0x70,0x7b,0xb1,0x02,0x14,0xb9,0xc1,0x40,0xe3,0x3e,0x23,0xa0,0x00,0xea,0xd0,0x7f,
                          0xb0,0xcc,0x84,0x2a,0x78,0x0d,0x44,0xe8,0x56,0xcf,0xf8,0x6f,0x1b,0x24,0x06,0xcf,
                          0xce,0x5e,0xe9,0xc3,0x26,0xc2,0x86,0x14,0x08,0x31,0x62,0x18,0xe3,0xf3,0xb5,0x00,
                          0xbf,0xa1,0xb5,0x9a,0x39,0xc0,0xf9,0x2e,0x11,0x6a,0x81,0xa0,0x20,0xa1,0x4e,0x3c,
                          0xd7,0xf7,0x38,0xfb,0x81,0x97,0xed,0x37,0xc2,0x14,0x1d,0xc0,0xdb,0x29,0xdc,0xf0,
                          0xe1,0x9c,0x4e,0x91,0x97,0xc0,0xbc,0xc9,0x9f,0x7d,0x00,0xcf,0x0f,0xe6,0xc8,0xcf,
                          0xc8,0x5b,0xd7,0x28,0x53,0x12,0x9e,0x63,0x17,0x35,0xbe,0x0a,0x92,0x8a,0xa9,0x03,
                          0x4e,0x7a,0x85,0x83,0x21,0x3a,0xfc,0xb9,0x80,0x82,0xdc,0x5c,0xac,0x12,0x72,0x2b,
                          0xd6,0x4a,0x43,0xfe,0x18,0x34,0x86,0xc0,0x3d,0x3d,0xff,0xf3,0x9b,0x25,0xc7,0x29,
                          0x54,0x60,0x0c,0x03,0xdc,0xd5,0xea,0x33,0x58,0x21,0x9a,0x81,0x6b,0xe0,0xac,0xbe,
                          0xd5,0x88,0xa4,0x81,0x4c,0xf0,0xd8,0x1e,0xb1,0xe9,0xde,0x3a,0x36,0x19,0xb0,0x66,
                          0x6b,0xce,0xb1,0xf9,0x80,0x53,0xc0,0x2a,0x61,0x9a,0x65,0x24,0x5f,0xef,0x12,0x69,
                          0x04,0x0e,0x35,0xdb,0xe4,0x6e,0xb0,0xff,0xea,0x8a,0xef,0xdc,0xd6,0x24,0xa0,0xe9,
                          0x0c,0x63,0xb0,0xa2,0x10,0x88,0x5d,0x97,0xa8,0x9f,0x3f,0x42,0xba,0x58,0x85,0x3b,
                          0x95,0x3f,0x33,0x90,0x11,0x65,0x07,0xfd,0x89,0xc6,0x06,0x68,0x2e,0xa8,0x59,0xac,
                          0xde,0xe5,0xcd,0x0b,0x83,0x58,0x7a,0x52,0x96,0x58,0x1a,0x17,0xdd,0x89,0x64,0xd4,
                          0xd5,0x47,0xdd,0x2d,0x02,0xdf,0xea,0x5c,0xd5,0xd7,0x6a,0xcd,0xa5,0xaa,0x51,0x74,
                          0x86,0xa2,0x51,0x3d,0x63,0x7e,0xca,0x23,0xa5,0xf4,0xdf,0x7f,0xd9,0x21,0xc4,0x71,
                          0x78,0xba,0x68,0x84,0xcb,0x23,0xc2,0xbb,0x95,0x8d,0x8c,0xbd,0x80,0xb2,0x39,0xaf,
                          0xe8,0xbc,0x0c,0xbc,0xe4,0x5c,0xbe,0xd5,0xfb,0x23,0x99,0xd5,0x67,0x0c,0x5a,0xff,
                          0x23,0x93,0xf5,0xf9,0x83,0x01,0x7c,0xa5,0xd6,0xcf,0x82,0xaa,0x53,0x8d,0xc5,0x31,
                          0xa5,0x04,0x6b,0xb7,0x00,0xe6,0x5d,0x6f,0x81,0xb8,0xf1,0x61,0x84,0x06,0x14,0x0e,
                          0x09,0x37,0xa3,0x7f,0xc7,0x66,0x39,0x89,0x72,0x68,0x0f,0x09,0x0c,0x76,0x27,0x33,
                          0xef,0xa3,0x09,0x3e,0xcd,0x86,0x44,0xd6,0xea,0xc2,0x5d,0xb2,0x08,0x4c,0x28,0x0b,
                          0x19,0x6e,0xa1,0x2a,0x1d,0x5a,0x54,0xd0,0x1c,0x71,0x5f,0x8a,0x87,0xd7,0x01,0xd6,
                          0x98,0x1f,0x10,0xe1,0x68,0xee,0xcb,0xe5,0xa7,0xfb,0x76,0x31,0xf7,0xab,0x60,0x90,
                          0xd9,0x62,0x3e,0x45,0xa0,0xd3,0xf5,0x08,0xeb,0x61,0x94,0x11,0x83,0xa0,0xc1,0x22,
                          0xe7,0x3e,0x2b,0xcd,0xda,0x3a,0xcc,0x3c,0x14,0x89,0x31,0xc0,0x6c,0xf7,0x18,0x50,
                          0x80,0x10,0xd1,0x19,0x66,0xe2,0xa2,0xf6,0x34,0xd8,0x2e,0xa5,0x43,0x83,0x44,0x75,
                          0x4b,0x23,0x07,0xb0,0x38,0x3e,0x2f,0xfe,0xae,0x07,0x02,0xc4,0x77,0xc1,0x32,0x4b,
                          0x4c,0xff,0x28,0xb7,0xfc,0xbe,0x39,0xa7,0x9d,0xf4,0xc7,0x1a,0x30,0x9e,0xd8,0x67,
                          0x67,0x64,0x56,0xca,0xf7,0x9d,0x1d,0xed,0xd9,0xcd,0x24,0x9f,0xcf,0x5f,0x6d,0xc8,
                          0x1f,0x35,0xb7,0x46,0xfc,0x4c,0x10,0x9a,0xc8,0x23,0xe3,0xf4,0x84,0xdb,0x86,0x78,
                          0x9c,0x72,0x2c,0xbe,0x86,0xc1,0xee,0x68,0x56,0x79,0x94,0x98,0xf5,0x1f,0x2a,0x64,
                          0x25,0xfd,0x3c,0x24,0x0a,0x63,0x57,0x19,0x45,0xea,0x28,0xfc,0x20,0xf0,0xb9,0x14,
                          0xac,0x26,0xb1,0x6f,0xe9,0xe7,0x25,0xd3,0xf2,0x2e,0x67,0x76,0xb9,0x9c,0xf2,0xaa,
                          0xfb,0x6b,0x48,0x9d,0x1d,0xf3,0x2c,0xe6,0x81,0xac,0xe4,0x1c,0x4e,0x14,0x19,0x98,
                          0x10,0x39,0x41,0x3f,0xb3,0xda,0x49,0xf6,0x32,0x9e,0xba,0xb7,0x7f,0x6a,0x43,0xab,
                          0x58,0x89,0xf4,0x7b,0x3a,0x3b,0x14,0xb0,0xc9,0xd4,0xcd,0xe7,0x0e,0x27,0xbb,0x4b,
                          0x64,0x22,0x84,0xe8,0x1a,0xa1,0xa6,0x92,0xeb,0x61,0x57,0x03,0xd0,0x1e,0x49,0x00,
                          0xb1,0xd1,0x25,0xa5,0xd0,0x17,0x92,0xa6,0xd6,0x2a,0xc3,0xfd,0x94,0x7f,0xbb,0xaf,
                          0x71,0x2d,0x92,0xf6,0x05,0xdb,0x92,0xda,0x53,0x37,0xb3,0xcd,0x2d,0x0d,0x3a,0xbd,
                          0xd5,0xbc,0x7a,0x59,0x5c,0xbe,0xd3,0x46,0x28,0x4e,0xe4,0x91,0x8d,0xe2,0x46,0x72,
                          0x25,0xc4,0x83,0xfb,0xa2,0x91,0x82,0xee,0x40,0xc7,0xfa,0x23,0x4b,0xec,0x50,0x7b,
                          0xe2,0xe4,0x11,0xc2,0x5f,0x43,0xa9,0x75,0x1f,0x73,0x6e,0x01,0x4c,0x87,0x59,0x23,
                          0xb5,0x21,0x32,0x33,0x19,0xe2,0xaa,0xd0,0x4c,0xdd,0x1d,0x2f,0x51,0xa9,0xef,0xae,
                          0x23,0xd1,0x63,0x87,0x2c,0xc6,0xa2,0x3f,0x10,0x40,0x09,0x17,0x93,0x0c,0x84,0x72,
                          0x3e,0x34,0x47,0x1b,0xc0,0x07,0x65,0x21,0x73,0xf7,0x4b,0xec,0x23,0x15,0x01,0x93,
                          0x06,0x8f,0xc8,0xbb,0x42,0xb5,0x8b,0xbb,0x60,0x20,0x61,0xb8,0xfa,0xe7,0xe8,0x82,
                          0x86,0x2a,0x99,0xa2,0x8f,0xa6,0xf4,0x0a,0x0e,0x0c,0xba,0x04,0xa8,0xd7,0x24,0xe7,
                          0x25,0x27,0x68,0xce,0xc3,0x9a,0xa3,0xb6,0x34,0x5a,0x7e,0x10,0xa3,0x58,0x1c,0x6f,
                          0x19,0x93,0x74,0x17,0xbe,0x72,0x06,0xfa,0xc6,0xe9,0x13,0x30,0xaa,0xf5,0x38,0x70,
                          0xc0,0x60,0xc3,0x7e,0xdf,0x52,0x23,0x6d,0xaf,0x71,0x59,0x7c,0x44,0x3a,0xe1,0xbc,
                          0x14,0xef,0xea,0x91,0x61,0x5d,0x3a,0x02,0xb1,0x9f,0x2a,0xad,0x45,0xe3,0x2e,0x3b,
                          0x78,0x18,0xdb,0x07,0x2d,0xf1,0x4d,0x8c,0x76,0x03,0xdd,0xaa,0xa6,0x7f,0xcb,0xc2,
                          0x0b,0xd6,0x66,0x8e,0xf7,0xd3,0x2c,0x39,0x3a,0x95,0x7e,0x6d,0x87,0x8a,0xf1,0x46,
                          0x31,0xc8,0x05,0xfd,0xab,0x37,0xd1,0xcf,0xed,0xa7,0xe3,0xe7,0x43,0x70,0x04,0xe5,
                          0xfc,0xb4,0x8f,0x5e,0xb5,0x38,0x0b,0xba,0x34,0x3f,0x48,0xb6,0x2e,0x94,0x60,0x6e,
                          0x22,0x8a,0x32,0x16,0xb2,0x6c,0x92,0x3e,0x26,0x63,0xf3,0xfb,0x73,0x3b,0x76,0x39,
                          0xb3,0xba,0x5f,0x5e,0x61,0xd1,0x03,0x3c,0xe4,0xcc,0xe3,0xf8,0x39,0x94,0x11,0x2d,
                          0x30,0xf1,0x85,0x95,0xcb,0x9c,0x1c,0xac,0xd6,0x8e,0xb1,0xb5,0xe6,0xb2,0x6f,0x00,
                          0x58,0xf5,0x61,0x93,0xa3,0x83,0x8f,0x28,0xdf,0x4c,0x97,0x15,0x91,0x70,0xad,0x60,
                          0x14,0x20,0xcf,0x3e,0xac,0x86,0x42,0x13,0xa1,0x50,0x1f,0x0b,0xc2,0xca,0x84,0x68,
                          0xdf,0x16,0xec,0xd3,0x77,0x0e,0x9d,0xa6,0x81,0xca,0x7e,0xa2,0x6c,0xd8,0x29,0x9c,
                          0xf6,0x65,0x61,0x0b,0x53,0x06,0x02,0x95,0xa3,0xfb,0xd6,0xbb,0xaa,0x72,0xee,0xb1,
                          0x50,0x2a,0x53,0xa7,0xd5,0x89,0x47,0x7a,0xc3,0xce,0x60,0x97,0x35,0xac,0x6c,0x52,
                          0x78,0xc5,0x21,0xc0,0xf0,0x01,0x26,0x21,0xb0,0xc1,0x67,0x2e,0xe2,0xc4,0x29,0x71,
                          0x55,0x33,0xbd,0x16,0xcd,0x6e,0x1c,0x3b,0xbf,0x0c,0xe6,0x4a,0x6b,0xf2,0xec,0xd4,
                          0xd9,0xe9,0x81,0x80,0x30,0x79,0xaf,0xdc,0xc3,0xdc,0xd5,0x25,0x18,0xe8,0xc7,0x41,
                          0x94,0x5b,0xeb,0x9a,0x59,0xd2,0xa0,0x92,0x3a,0x50,0x5e,0x66,0xa7,0x64,0xb1,0x3a,
                          0xa1,0x42,0x17,0xa7,0xb8,0xfa,0x18,0x42,0xae,0x32,0xd6,0x10,0x22,0xd2,0xea,0x3e,
                          0xc4,0x30,0x7f,0x1a,0xab,0xe4,0x17,0x8e,0xfc,0x1d,0x3f,0x23,0x36,0x0d,0xb3,0x5e,
                          0x69,0x1b,0xf3,0x64,0xea,0x26,0x73,0xfc,0x21,0xd6,0x52,0xd6,0x99,0xce,0x02,0xf1,
                          0xbe,0xd3,0xa4,0xb0,0xc3,0x60,0x3f,0x22,0xc3,0xf9,0x10,0xe9,0x39,0x92,0x94,0xaf,
                          0xf7,0x6f,0x5e,0x59,0xa6,0x44,0x63,0xcb,0xc6,0xa3,0x6d,0x23,0x28,0x2e,0xb1,0x9c,
                          0x51,0x9d,0x77,0x57,0x9f,0xb8,0xe1,0xbd,0xab,0x46,0xe7,0x65,0xc7,0x72,0x1a,0x60,
                          0x5a,0xb9,0x6e,0x70,0x5e,0x1c,0x49,0x14,0x60,0x6d,0xaa,0x0c,0xa1,0xab,0x05,0x44,
                          0xa3,0x53,0xa5,0x06,0xf9,0x14,0xcb,0x36,0xdf,0x37,0x25,0x05,0x18,0xc9,0xf7,0x8c,
                          0xf1,0x5d,0x0c,0xa4,0x56,0xb6,0xfc,0x36,0x57,0x82,0xc4,0x4b,0xe1,0xd8,0xdc,0x31,
                          0x19,0x0b,0x31,0x58,0xf4,0x71,0x20,0x4b,0x3d,0xd0,0x76,0xba,0x45,0x7c,0x25,0x10,
                          0x9f,0xec,0xcc,0x7d,0x4c,0xf0,0x8d,0x29,0xa5,0x29,0xdb,0x89,0x0d,0xdf,0xe6,0x37,
                          0x9b,0x4f,0xd4,0x02,0x26,0xc2,0x1a,0x59,0x55,0x90,0x4f,0xe8,0xb5,0x21,0xef,0xe3,
                          0x1e,0x27,0x44,0x85,0xe8,0x67,0x4c,0xdc,0x24,0xf0,0x16,0x86,0x17,0x73,0x8f,0x89,
                          0x0d,0x2a,0xeb,0x59,0x17,0x8f,0x8c,0x9a,0xaf,0xac,0x71,0x4f,0xe0,0x55,0xcd,0xb5,
                          0x37,0xd3,0xf1,0xfc,0x80,0xd1,0xe2,0xe6,0x55,0xc7,0xc2,0x59,0xbc,0x0b,0x64,0x61,
                          0x16,0x62,0xe8,0x9f,0x4f,0x2b,0x4e,0xfd,0x9a,0xe9,0x48,0xa1,0x42,0x91,0x3b,0xef,
                          0x3b,0xcb,0x7f,0x3c,0x69,0x54,0x5b,0xc2,0xee,0xd8,0x4d,0x05,0x91,0x4d,0x05,0x3f,
                          0xfb,0xd6,0x31,0x26,0xdd,0xcc,0xb1,0x6e,0xad,0x7f,0xa4,0xeb,0x56,0x1a,0x82,0x42,
                          0x3d,0x2a,0x35,0x80,0x94,0xab,0x65,0x6d,0x7f,0x88,0x97,0x57,0x21,0x00,0x12,0xd6,
                          0xa9,0xdc,0x1c,0xd6,0xe7,0x98,0x99,0x30,0xb6,0xff,0x87,0x27,0x49,0x0d,0xd5,0xfe,
                          0x07,0x6a,0x4d,0x11,0xb2,0x14,0xa9,0xf4,0xbc,0x73,0x5b,0x01,0xc5,0x35,0x8e,0x15,
                          0xfa,0x91,0xe6,0xd7,0x95,0xea,0x92,0x41,0x86,0x1b,0x9c,0x81,0x0b,0xf3,0x6c,0x1c,
                          0x88,0xaa,0x9c,0xcb,0x02,0xc9,0xeb,0x39,0xe4,0xd8,0x5f,0x26,0xfb,0xad,0x08,0x98,
                          0xe0,0x52,0xff,0x5a,0x0b,0xcb,0x71,0x88,0x5b,0x2b,0x26,0x6f,0x95,0x55,0x62,0x1a,
                          0xf8,0x1a,0x54,0x6c,0x13,0xf1,0x7d,0xae,0x92,0x40,0xed,0xc8,0x94,0xfc,0x77,0x07,
                          0x08,0x2a,0x45,0x88,0x54,0x14,0x11,0x29,0x41,0xa3,0xf7,0xf6,0xd6,0x85,0x82,0x16,
                          0x6d,0xd8,0x78,0x05,0xa6,0x3b,0xe7,0xae,0x44,0xc0,0x00,0xb3,0x34,0x67,0xbd,0x9b,
                          0x74,0xce,0x88,0xc5,0xe8,0x76,0x70,0x49,0x53,0xe5,0x99,0x7d,0xda,0x4a,0xa9,0x81,
                          0x24,0x2c,0xe8,0x97,0xc8,0x78,0x7c,0x08,0xaf,0x00,0x62,0x75,0x5c,0x2a,0x7a,0xd4,
                          0xcd,0x3f,0xf7,0xa7,0xdd,0x7e,0xac,0xf7,0x1d,0xea,0x54,0x9d,0x2c,0xc7,0x8d,0xe7,
                          0xa3,0xa4,0x45,0x45,0xe5,0x3c,0x71,0xca,0x74,0x6b,0xfe,0xcf,0xd5,0x89,0xca,0x58,
                          0x40,0x98,0x74,0x75,0xe0,0x8c,0x9b,0x9a,0x3e,0xf4,0x26,0x0c,0xc7,0x37,0x4d,0x28,
                          0xc1,0xe9,0x3e,0x4a,0x58,0x31,0x2e,0x2b,0x62,0x25,0x21,0x82,0xda,0x52,0xef,0xcb,
                          0x4f,0x96,0x9b,0x38,0x69,0x37,0xf6,0x05,0x79,0x08,0xbb,0xc7,0x8f,0x6d,0x46,0x4d,
                          0xd7,0x03,0xc9,0x30,0x92,0x6a,0x9d,0xe9,0x26,0xf4,0x4e,0x7d,0x84,0x8b,0x9c,0x7c,
                          0x52,0x71,0x86,0xb2,0x4c,0x07,0x2f,0x42,0x5e,0xd4,0xff,0xdc,0x28,0xa1,0x8c,0xc0,
                          0x75,0x13,0xd0,0xdf,0x69,0xfc,0x57,0xf1,0x47,0x0f,0xf8,0x1e,0x83,0x26,0x3c,0xe2,
                          0xbd,0x01,0x44,0x22,0x5c,0xd8,0x32,0xdf,0x16,0xc5,0x6d,0xcf,0x30,0x06,0x3b,0xb0,
                          0x83,0x61,0xc1,0x54,0x45,0x90,0x3c,0xcb,0x73,0x71,0xaa,0x5a,0xcc,0x08,0xa6,0x92,
                          0xf8,0x54,0xa6,0x4a,0x6b,0xbf,0x5e,0x9d,0x5e,0x58,0x43,0x48,0xbe,0xd3,0x4e,0x06,
                          0xf6,0x0a,0xd0,0xea,0x5b,0xa4,0x4f,0xe1,0x7a,0x6b,0x74,0x5e,0x61,0x5d,0x03,0xbe,
                          0xc6,0x55,0x6d,0xcb,0xdc,0xf6,0x7f,0x2b,0xe2,0x91,0x9d,0xe3,0x68,0x45,0xa3,0xef,
                          0x47,0x78,0x4c,0x7d,0x2b,0x68,0x59,0x14,0x2d,0x0a,0x4a,0xac,0x4a,0x27,0x23,0x7a,
                          0x03,0xdc,0x22,0x62,0x32,0x57,0x3b,0x35,0xa1,0xa2,0x81,0x61,0x09,0x85,0x52,0xea,
                          0xc8,0xb1,0x2f,0x0d,0x3d,0xb7,0xe9,0x7d,0xd2,0x2c,0x0f,0x87,0x5b,0x53,0xee,0xb9,
                          0x29,0x85,0x33,0x5f,0x01,0x39,0x73,0x4c,0x8b,0x78,0x7b,0xbe,0x70,0x1d,0x6a,0xfc,
                          0xd3,0x31,0x02,0x3f,0xf3,0x3f,0xa8,0x7b,0x78,0x7e,0x3b,0x74,0x0d,0x93,0x90,0xb0,
                          0x2f,0x9f,0xf9,0x5d,0x93,0xc5,0xe9,0x21,0x2f,0x54,0xd4,0x74,0x7b,0x46,0xa1,0x32,
                          0x46,0x9a,0x26,0x93,0xbf,0x39,0x33,0xd7,0xef,0x25,0x90,0xc0,0x5b,0x9b,0xfd,0x90,
                          0x07,0x2b,0x9f,0xd2,0x9f,0xde,0x55,0xf5,0x39,0xd4,0xee,0x86,0xa8,0x40,0x88,0x70,
                          0xed,0x8c,0x4e,0xca,0x3e,0x53,0x31,0x18,0xea,0x62,0x99,0x6e,0xc7,0x95,0x60,0x6b,
                          0x04,0x40,0x10,0x7e,0x50,0x9c,0x3a,0xad,0x07,0xd8,0x50,0xc2,0x1d,0x36,0x35,0x2f,
                          0xc1,0xe1,0xad,0x73,0x41,0xda,0x96,0x70,0x33,0x04,0x7d,0x73,0x63,0x61,0xca,0x1e,
                          0xbd,0x67,0x7e,0x04,0xf2,0x6c,0xba,0x2a,0x5b,0x00,0x53,0xdb,0xe0,0xc7,0x2c,0xc2,
                          0x48,0xa5,0xc3,0x9f,0x36,0x61,0xfd,0xc7,0xc8,0x0b,0x9c,0x3f,0xca,0x03,0xdd,0x96,
                          0x61,0xcb,0xeb,0xb7,0xe7,0xc0,0x8b,0x02,0x58,0x31,0x00,0xee,0xb8,0x84,0x4f,0x1e,
                          0xf9,0x14,0x93,0x71,0x23,0x19,0xb8,0xea,0x5b,0x72,0xb2,0x64,0x88,0xb1,0xc1,0x03,
                          0xff,0x70,0x8e,0x88,0x26,0x03,0x64,0x3c,0x1c,0x35,0xeb,0x36,0xad,0x46,0x46,0xc6,
                          0x19,0x66,0xec,0x31,0xab,0xd2,0xef,0x2b,0x79,0x29,0x85,0xde,0xf3,0xdf,0x5e,0xa7,
                          0xbf,0xe5,0xde,0x70,0xdd,0x6d,0x13,0xcf,0x0f,0x54,0xc9,0xfe,0xae,0x17,0x4c,0xa5,
                          0x8f,0x12,0x4a,0x33,0x3f,0x60,0x00,0x66,0x18,0x05,0xe3,0x88,0xcf,0x6a,0x12,0xd2,
                          0x11,0x39,0x60,0xfe,0x7b,0xd5,0x88,0x49,0xd0,0x1d,0xcc,0x44,0x03,0xaf,0x83,0xeb,
                          0xf1,0xbb,0x78,0x92,0xb3,0x11,0x45,0x66,0x8c,0x4b,0xe9,0x80,0xdd,0xa4,0x8f,0xc1,
                          0x1d,0xea,0x48,0x63,0xaa,0xd3,0x06,0x07,0x61,0x27,0xa8,0xdd,0xa3,0x8d,0xe6,0xbd,
                          0x1a,0x9d,0x9d,0xde,0x0c,0x8c,0x28,0x77,0xc2,0x4f,0xee,0x51,0x0e,0xd8,0x4a,0xb5,
                          0xd4,0x74,0x79,0xdf,0xe5,0x40,0x6f,0xaf,0x1b,0xf4,0x34,0x58,0xdd,0x26,0x04,0x64,
                          0xc3,0xfd,0xcd,0xd5,0xa8,0xa1,0xe2,0x14,0x8b,0xbe,0xf2,0xe5,0x60,0x86,0x2d,0x48,
                          0x6a,0x70,0x89,0x0d,0xd5,0x7a,0xb5,0x73,0xeb,0x07,0x09,0x88,0x62,0xd2,0x9e,0xa6,
                          0xb1,0x05,0xa8,0xec,0x55,0xa2,0xb4,0x5a,0xa3,0x35,0xc8,0x54,0xe5,0xfb,0xac,0xa4,
                          0x33,0x9f,0xb4,0x96,0x76,0xfd,0xc0,0xe3,0xe0,0x6c,0xdb,0xfc,0x80,0x22,0x02,0x2d,
                          0xe9,0xdc,0x4f,0xfb,0xab,0x63,0xa2,0x83,0x82,0x6c,0x8c,0xe6,0x04,0x0c,0xf3,0xb4,
                          0xc1,0x5a,0xde,0x2f,0x6c,0x78,0x0d,0x44,0xbf,0x32,0x2e,0x7a,0x7a,0x87,0xf3,0xd0,
                          0xe9,0x65,0xeb,0xae,0xb6,0xe6,0xef,0xde,0xf8,0x54,0x5f,0x2a,0xb9,0x56,0x92,0x90,
                          0x50,0x7e,0x6e,0x3a,0xc2,0x0c,0x98,0x0c,0xd5,0xf2,0xcb,0xb7,0xf7,0xac,0x7b,0xfa,
                          0xf9,0xc0,0xe6,0x6f,0xc5,0x06,0xeb,0x90,0x90,0xbc,0xa6,0x87,0xf1,0xc0,0x66,0x96,
                          0xe5,0x80,0xa6,0x8a,0x76,0x1f,0xbd,0xf5,0x3e,0xeb,0x91,0xf7,0x8c,0xbe,0x5b,0x5d,
                          0x4d,0x94,0x52,0x07,0xf8,0x33,0x05,0xf7,0x44,0xe5,0xa0,0xcc,0x2e,0xf6,0x2a,0xe7,
                          0x7a,0x5f,0xb6,0x75,0xb1,0x9f,0x82,0x55,0xa3,0x1b,0xce,0x87,0x26,0xa9,0xb9,0xf6,
                          0xa4,0xbc,0xbe,0xe3,0x33,0x88,0x8c,0x0e,0xe3,0x77,0x1a,0x46,0x77,0x71,0xee,0xfe,
                          0xaf,0x83,0x14,0x1f,0x31,0x82,0xd9,0x50,0xc3,0xb9,0xe5,0x19,0x81,0x65,0xd6,0xfd,
                          0xb4,0xc2,0x2d,0x0c,0x16,0x69,0x43,0x97,0x8a,0x00,0x9c,0x9b,0xb0,0xc6,0xca,0xc4,
                          0x56,0xd6,0x46,0x9b,0x87,0xa2,0x43,0xa6,0xcd,0xa3,0xb8,0x54,0xaf,0xbf,0xa2,0x02,
                          0xd9,0x49,0x9a,0xc8,0x0a,0x53,0xb2,0x2e,0x01,0xb0,0xb5,0x60,0xcf,0xe9,0x9f,0xf6,
                          0x43,0x20,0x22,0x06,0x9e,0x1f,0x14,0x4e,0x41,0x39,0x74,0xd7,0xb3,0x20,0xde,0x72,
                          0x7b,0xac,0x79,0xd8,0xb8,0x55,0x5a,0xfd,0x0c,0x1b,0x02,0x43,0xe6,0xbb,0x45,0x52,
                          0xb5,0x0c,0x51,0x44,0x63,0x8b,0xe1,0x8a,0x84,0x37,0xc2,0x17,0x2c,0xd0,0xc3,0x60,
                          0xa0,0xd6,0x5e,0x19,0x72,0x5f,0x59,0x11,0x96,0xa5,0x87,0xec,0x71,0x8a,0x0e,0xfb,
                          0x58,0x78,0x88,0x0f,0xcb,0xbf,0x48,0xef,0xfe,0xad,0x62,0x12,0xf1,0xfc,0xbc,0xf5,
                          0xc1,0xbb,0xd5,0xe5,0xd3,0x31,0xe6,0xd3,0x65,0xcf,0x8d,0xfa,0x2c,0x38,0x85,0x4e,
                          0x67,0xdf,0x52,0x83,0x11,0xec,0x19,0x5a,0xd6,0xfd,0xdc,0xd4,0x00,0x64,0x92,0xbd,
                          0x14,0x8a,0x6d,0x55,0xb8,0xe6,0xd4,0x31,0xa9,0x47,0xcf,0x6d,0x2c,0xcf,0x00,0xf5,
                          0x1d,0x7a,0xfd,0x1f,0x50,0x5b,0x12,0x7f,0x1d,0x6b,0xb1,0xbb,0xe8,0x59,0x50,0x84,
                          0xc5,0x74,0xa3,0x76,0x20,0xe9,0x1f,0xdc,0x29,0xcc,0x5f,0x81,0xa6,0xa2,0x45,0xa2,
                          0xce,0xea,0xa2,0xe5,0xd8,0x6d,0xf9,0x2f,0x5a,0x50,0x91,0x19,0x99,0x7e,0xee,0x1f,
                          0xa5,0x78,0x51,0x97,0x24,0xef,0xf7,0x8b,0x59,0x9e,0x05,0xd5,0xd3,0x42,0x0b,0x81,
                          0x8e,0x24,0x61,0xa1,0x4f,0x11,0x6c,0xb3,0x1d,0xd9,0xbd,0x8e,0x77,0xed,0xf9,0xaa,
                          0x2e,0x9d,0xb6,0x1c,0x54,0x82,0xc8,0xa7,0x7d,0x5a,0x78,0xef,0xe4,0x9e,0x2c,0x08,
                          0x21,0xc0,0xf6,0xf6,0x4d,0x5e,0xb4,0xab,0x8c,0x23,0xff,0x47,0xc6,0xcf,0x70,0x04,
                          0xeb,0x80,0xfa,0xea,0x7c,0x5a,0xe0,0x83,0x65,0xaf,0xa4,0xf4,0x6b,0xb6,0xd0,0x5e,
                          0x6b,0x36,0x1e,0x88,0xf7,0x55,0x6a,0x24,0x6f,0xc5,0x5a,0xe7,0xc1,0xc7,0xaa,0x0a,
                          0x01,0x32,0x87,0xd1,0x5b,0x01,0xc4,0x5b,0x8e,0xd7,0x83,0x7b,0x44,0x28,0x02,0x2b,
                          0xa3,0x65,0xcc,0x5c,0x71,0xd9,0x4d,0x23,0x7d,0x9f,0xc1,0x34,0x50,0x2f,0x91,0x86,
                          0x75,0xba,0xff,0xdd,0x67,0x35,0xc1,0x8d,0xd7,0x3b,0xbf,0x68,0xb9,0x53,0x2d,0x3f,
                          0x37,0x80,0xab,0xde,0xeb,0xbe,0x61,0x00,0xb3,0xb6,0xae,0x65,0xb4,0xe3,0x48,0xaf,
                          0x4c,0xa2,0x9a,0x26,0x67,0x2d,0xe8,0x00,0x80,0xec,0xeb,0xcf,0xf2,0x95,0xe3,0x4c,
                          0xe5,0x68,0x1e,0x04,0x00,0x79,0xe6,0x3c,0xf0,0x69,0xce,0x8d,0xab,0x6f,0x6f,0x76,
                          0x5c,0x0b,0x83,0xc0,0xc6,0xa4,0x24,0x72,0x69,0xf3,0x15,0x44,0x9f,0x30,0x2a,0xae,
                          0x16,0x7a,0xfb,0x87,0x7e,0x84,0x18,0xc4,0x56,0x2a,0xbb,0xa1,0xf4,0xdf,0x38,0xb4,
                          0x10,0x65,0xfd,0xc5,0x15,0x0c,0x61,0x54,0x80,0x83,0x6e,0xd6,0x20,0x6e,0x6c,0x3b,
                          0x53,0x90,0x3b,0x7d,0x48,0xf2,0x5e,0xd1,0xa0,0xf9,0x69,0x88,0x2c,0x74,0xd7,0x92,
                          0x70,0x42,0x3a,0x05,0x72,0x8f,0xa6,0x9c,0xa0,0x0d,0x3c,0xb4,0x20,0xa7,0xc4,0x75,
                          0x68,0x40,0xca,0xf3,0xd1,0xfe,0x56,0xca,0x3f,0x0a,0x75,0x20,0x4b,0x3a,0x90,0x52,
                          0xfc,0x16,0x6b,0x32,0x60,0xb4,0x2f,0xc2,0x86,0xe4,0x3e,0x95,0xa7,0x80,0x32,0xd8,
                          0x7e,0x47,0x16,0x6b,0xc1,0xbe,0x80,0x0a,0xad,0xf6,0x51,0xfc,0x54,0x42,0x97,0xf3,
                          0x89,0x0f,0x80,0xe9,0x5f,0x16,0xbb,0xf0,0x40,0x54,0x00,0x02,0x2f,0xa1,0x0b,0xb9,
                          0x97,0xc7,0x0b,0x02,0xc6,0x57,0xb9,0x89,0x4d,0xb1,0xc3,0x98,0x9e,0x1e,0x22,0xb0,
                          0xdc,0xea,0x72,0x83,0x36,0x59,0x6e,0xbf,0xe4,0xb5,0xcd,0x7d,0x2a,0x31,0xf2,0x4a,
                          0x9f,0xe2,0x0f,0x25,0x9e,0xfc,0xc2,0xff,0xeb,0x2d,0xd6,0x29,0xb6,0x43,0x6f,0xfe,
                          0x09,0x09,0x97,0x20,0x27,0xc4,0xab,0x2d,0x8f,0xcd,0x1d,0xd5,0x2a,0xab,0x3a,0x05,
                          0xab,0xb6,0x73,0x90,0xc0,0x68,0xbf,0x58,0x2e,0x68,0x0c,0xeb,0x05,0x8c,0x6e,0xd9,
                          0x4b,0x28,0x97,0x51,0xe6,0xf9,0x4b,0xcb,0x34,0xa8,0xfe,0xb4,0x20,0xee,0x4d,0xea,
                          0xd4,0x8b,0x21,0xc0,0x45,0x0c,0x22,0x93,0xd4,0xd0,0xab,0xde,0xae,0x7e,0x53,0xf6,
                          0xfd,0x16,0xeb,0x33,0x72,0xb9,0x8b,0x2c,0x00,0xc9,0x34,0x5e,0xea,0x53,0xb4,0xfe,
                          0x19,0x58,0x8d,0x79,0x1b,0x77,0x22,0x13,0x2f,0xfd,0xbf,0xa3,0x2a,0x0d,0x9f,0x7c,
                          0x80,0x73,0x11,0x26,0xf9,0x86,0xa6,0x63,0xfd,0x4d,0xbb,0x7c,0xc1,0xb8,0x51,0x3a,
                          0x21,0xb3,0xa1,0x85,0xba,0x97,0xf3,0xf9,0x18,0xb8,0xe5,0x2b,0xb6,0xc6,0x16,0xca,
                          0xc7,0x4b,0xb5,0x51,0x4d,0x10,0x02,0x30,0xbe,0xb0,0x7f,0xd8,0x64,0x00,0xd5,0x7f,
                          0x39,0xd4,0x55,0x3a,0x6a,0xee,0x80,0x66,0x29,0x8e,0xce,0xe4,0xc1,0x23,0xa9,0x6f,
                          0x7f,0x43,0xba,0x65,0x64,0xc4,0x87,0x8a,0x0e,0x1c,0xca,0xc4,0x7c,0xff,0xc7,0x5f,
                          0x70,0x17,0x54,0x12,0x6a,0xdd,0x9b,0x96,0x08,0x41,0x47,0x09,0xa9,0xf4,0x1e,0x2c,
                          0x64,0x78,0x1d,0xc8,0xa9,0x6c,0xb1,0xc4,0x62,0x14,0x31,0x6e,0x4b,0x3d,0x88,0x36,
                          0x73,0x3e,0x80,0x91,0x05,0xf6,0xd7,0x76,0xa9,0x2e,0x98,0x81,0x5e,0x5f,0x94,0x2b,
                          0x77,0x0b,0xe0,0x86,0x21,0xd8,0xc9,0x6f,0x92,0x27,0xd2,0x09,0xf5,0xee,0x48,0x9a,
                          0x94,0xb6,0x18,0xf2,0x73,0x88,0x07,0x90,0xe0,0x05,0xe9,0xdf,0x0c,0x75,0xa2,0xb6,
                          0x7a,0x4f,0xeb,0xec,0xf6,0xdc,0x4a,0x17,0x2c,0xe7,0x4c,0x06,0xf8,0x52,0xd7,0x76,
                          0x42,0x99,0x69,0x6a,0x2c,0x0b,0xe5,0x5f,0x67,0x66,0x89,0x5f,0x0d,0xc6,0xdc,0xb5,
                          0x01,0x5d,0x11,0xfb,0x20,0xbb,0x69,0x63,0xc9,0x9c,0xe3,0x96,0x14,0xd4,0xf7,0x76,
                          0xad,0x59,0x48,0xab,0x8a,0xc0,0x2f,0x07,0xec,0xa5,0x68,0x47,0x04,0x4f,0xf2,0xfe,
                          0xd5,0xe4,0x4a,0x3d,0x9c,0xa9,0x7c,0x11,0x8c,0x0c,0x66,0x5d,0x01,0x60,0xae,0x38,
                          0x06,0xce,0x32,0xbe,0xe8,0xe7,0xad,0xec,0x66,0x1b,0x08,0x79,0x74,0x61,0x3b,0x67,
                          0x5d,0x56,0x05,0x1b,0xa3,0xe5,0x27,0xf9,0xc1,0x8f,0xfd,0x8b,0xe0,0xa4,0xc2,0x09,
                          0xd8,0x04,0xa6,0x13,0xf7,0xe2,0x7f,0x85,0x6b,0x14,0x54,0x46,0x38,0x62,0x71,0xcd,
                          0xad,0xeb,0xa9,0xba,0x9f,0x95,0x54,0xcd,0x9c,0x71,0x00,0xda,0xfa,0xc5,0xe8,0x27,
                          0x33,0x72,0xcf,0xb2,0xc3,0x86,0x08,0xe3,0x5a,0x0a,0x35,0xd0,0xe4,0xf0,0x7d,0x49,
                          0x8d,0x92,0x7e,0xa3,0x6a,0x54,0x72,0xf1,0x0f,0x5f,0x67,0xf8,0xbd,0x89,0xe9,0x33,
                          0xbc,0x72,0xd0,0xdc,0x23,0xc9,0x60,0x99,0x77,0xa5,0x09,0xcb,0x94,0x70,0x54,0xbe,
                          0x56,0x48,0x0b,0x01,0x7d,0xde,0xff,0x45,0xa3,0xba,0x17,0x3c,0x14,0xa4,0xb8,0x78,
                          0x22,0xd4,0xfd,0xf4,0x45,0x95,0x15,0x8d,0xf0,0x49,0x36,0xdf,0x02,0xc2,0x40,0xaa,
                          0x16,0x17,0x5e,0x68,0x35,0x52,0x33,0xac,0xa4,0x4d,0xd7,0x90,0x42,0x9f,0xd5,0xd1,
                          0xee,0x7f,0x32,0x11,0xf1,0x4d,0x9e,0x31,0xd4,0xb9,0x08,0xdd,0x36,0x7a,0xa2,0x0c,
                          0x06,0x1a,0x58,0x25,0xf2,0x4b,0x99,0x79,0x4b,0xf9,0x43,0x14,0xb6,0xe2,0x7c,0xe9,
                          0x34,0x5b,0xb6,0x13,0x19,0x55,0x65,0x4e,0x92,0xcf,0x15,0xf9,0xd6,0xdc,0xa1,0xf2,
                          0x02,0x87,0xad,0xee,0xf4,0xd4,0xa5,0x22,0x2d,0x93,0x62,0x67,0x1a,0x99,0xb0,0x4a,
                          0xd5,0x5c,0x23,0xb0,0x5a,0xdd,0xfb,0x76,0x73,0xed,0x49,0x33,0xc6,0xb2,0x26,0x4c,
                          0xe0,0xcd,0x8a,0xe2,0xb3,0x86,0x6c,0x17,0xec,0x66,0xbb,0x44,0xc0,0x8f,0x17,0xe3,
                          0xaf,0xe6,0xd5,0x89,0x1e,0x50,0x5c,0x7c,0xe0,0xcd,0x39,0x65,0x46,0x90,0xd1,0xe0,
                          0xf5,0x52,0xbc,0xa2,0x0d,0x4d,0x76,0x6f,0x55,0x2a,0xa2,0x84,0xdd,0xf0,0x64,0x98,
                          0x3c,0x46,0x10,0xb5,0xd5,0xf3,0x9d,0x5e,0x13,0x1c,0xa3,0x1b,0xf1,0x65,0xc4,0xeb,
                          0xf3,0xc5,0x7c,0x94,0x07,0x4b,0x8b,0x4d,0x8b,0xa7,0x2e,0x74,0x22,0x2a,0x5b,0xa4,
                          0xca,0x50,0x94,0xa0,0x1a,0xf1,0x6f,0x26,0xbe,0xbc,0xa6,0xb5,0x9f,0x82,0x1a,0xb1,
                          0x87,0xae,0xdc,0x87,0x34,0xe4,0x76,0xb3,0x64,0x81,0x2b,0x7e,0x56,0x56,0x81,0x0a,
                          0xfb,0xa0,0x57,0x69,0xdd,0xcb,0x1e,0x6a,0x7e,0xbb,0x1a,0xfd,0x49,0xe3,0x06,0xd8,
                          0x7c,0x51,0xcf,0x04,0xb2,0xc4,0x8b,0x0f,0xc2,0x4f,0x31,0x2f,0xf4,0xbf,0x59,0x49,
                          0x17,0xdf,0xf0,0xe6,0x29,0x54,0xc0,0x20,0x25,0x15,0x2c,0x43,0x94,0x3b,0x3b,0x92,
                          0xda,0xa9,0xc6,0x91,0x79,0xdd,0xa3,0x97,0x22,0xb4,0xab,0x27,0x24,0xc1,0xc0,0xaf,
                          0xf9,0x6d,0xf6,0x93,0xa2,0x6c,0x06,0xfa,0x5b,0xea,0x65,0x8f,0x50,0xd3,0xdf,0x60,
                          0x9e,0xe7,0xea,0x93,0x6f,0xdc,0xc3,0x40,0x37,0xa8,0xf4,0xdc,0xb3,0x5c,0x2d,0xa1,
                          0x63,0xbe,0x74,0x1c,0x88,0xad,0xcf,0xcd,0x90,0x9b,0x13,0xab,0x33,0xc2,0xa3,0xa4,
                          0xc3,0x9c,0xd8,0x28,0xc4,0x6f,0x8f,0x60,0x1f,0x6c,0x92,0x32,0xba,0xa2,0xea,0x57,
                          0x6d,0xb2,0xcb,0xcb,0x25,0xd6,0x41,0x03,0x1f,0x42,0xf0,0x82,0xcc,0x52,0xc0,0x8c,
                          0xea,0x03,0x16,0x30,0x0f,0x57,0x48,0xdb,0xd1,0x52,0x68,0xea,0x85,0xac,0x5c,0xc4,
                          0x12,0x47,0x51,0x0f,0x95,0x57,0xe7,0x08,0x84,0x75,0x9d,0x09,0x6c,0xa2,0x11,0x98,
                          0x18,0x17,0x2d,0xd1,0x42,0x38,0xb8,0x1c,0xa8,0xd8,0xf3,0x8a,0x4c,0x96,0xca,0xc1,
                          0xfb,0xcc,0xfc,0xfc,0xd0,0x8d,0xe3,0x7b,0x93,0x6f,0xa7,0x02,0x5d,0x2f,0xfa,0x3f,
                          0xf1,0xea,0x69,0x83,0xd7,0xf4,0x45,0xe0,0x77,0xd4,0x92,0x91,0xff,0x2c,0x00,0xf2,
                          0x8e,0xfa,0xf1,0x86,0x25,0x3c,0x44,0x39,0x60,0xd8,0x18,0x79,0x68,0x87,0x8f,0xc8,
                          0xe8,0x4d,0x2d,0x47,0x50,0xa5,0xa5,0xdb,0x78,0xf8,0x23,0x06,0x66,0xbe,0x9f,0x36,
                          0x8e,0x0c,0xb9,0xf8,0x72,0xa2,0xe8,0x65,0x3d,0xd0,0xa1,0x77,0x22,0xb7,0xc2,0x8a,
                          0x4b,0xa0,0xca,0x39,0x13,0x9e,0x65,0x20,0x38,0x9c,0x91,0xe6,0x22,0x0b,0x81,0x61,
                          0x7a,0x32,0x7f,0x03,0x14,0x47,0xf3,0xca,0x1d,0x0d,0x45,0x57,0x61,0x66,0x29,0xb2,
                          0xb0,0x69,0xd5,0x8d,0x2a,0x55,0xba,0x73,0xc4,0xea,0x4f,0x76,0xbe,0x43,0x42,0xeb,
                          0x62,0x8e,0xf7,0xe7,0x97,0x32,0xa3,0x8c,0xce,0x77,0xf6,0x1f,0x60,0x18,0x83,0x88,
                          0x34,0x9c,0x81,0x5e,0x92,0x8d,0xeb,0x5c,0x7b,0x4b,0x8f,0x71,0x7d,0x65,0x0c,0xe4,
                          0x82,0x4b,0xcd,0x29,0x84,0x07,0x90,0x2b,0xb5,0xb8,0x14,0x8c,0xa3,0x71,0x9e,0xe8,
                          0xcb,0xd4,0x1a,0x8f,0xe3,0xf0,0x38,0xd5,0xe6,0x5b,0x6c,0x08,0x11,0xe3,0x3f,0x3e,
                          0x25,0x2d,0x6f,0x98,0x6b,0xd1,0x76,0x09,0xb1,0x17,0x96,0xdd,0x55,0xe6,0xde,0x7d,
                          0x13,0xb6,0x1b,0x43,0x79,0x7b,0x51,0x26,0xcd,0x94,0xad,0xa5,0xe5,0x1b,0x98,0x0b,
                          0xc8,0x46,0xe4,0x27,0xab,0x37,0x70,0x08,0xd5,0x56,0xc1,0x00,0x96,0xea,0xcc,0x87,
                          0x64,0x88,0xec,0x86,0x0c,0x70,0x4b,0xc2,0x00,0x27,0xa3,0x3b,0x74,0x18,0x66,0x4c,
                          0xe1,0x0b,0xe5,0xef,0x7e,0x0a,0x9c,0x40,0xae,0x39,0x65,0xe2,0x4b,0x11,0x33,0x1c,
                          0x9e,0x5c,0xe1,0xa5,0x06,0xda,0xf1,0x34,0xe5,0x46,0x3e,0x4d,0x8a,0x4f,0x8c,0x27,
                          0x93,0xf6,0xc6,0xe7,0x29,0xe2,0x87,0xc2,0x83,0xaf,0xa8,0xdb,0x2a,0x0e,0xc6,0xeb,
                          0xd6,0x1c,0x41,0x72,0xe2,0x2f,0x63,0x45,0xdd,0xb7,0x52,0xda,0x9d,0xea,0x0c,0x7a,
                          0xd6,0x06,0xe2,0xbb,0x53,0xbe,0x0e,0xd8,0xec,0x2d,0xd3,0xbb,0x6b,0x12,0xe4,0x89,
                          0xfd,0x28,0x3a,0x6d,0xfb,0xca,0xc5,0xd0,0x4a,0x16,0xa8,0x63,0xe3,0x88,0x7a,0x9b,
                          0xda,0x18,0x0e,0x93,0x27,0xd6,0x57,0x21,0x93,0xda,0xd8,0xcd,0x8c,0x01,0x07,0xb7,
                          0xe8,0x3f,0x6f,0x62,0xc6,0x91,0x50,0xbe,0x83,0xb9,0x4d,0xeb,0x13,0x1a,0xbc,0x9a,
                          0xbe,0x70,0xed,0x48,0xc1,0xfc,0xab,0xd4,0x02,0xd4,0x86,0x9d,0x0d,0x2e,0xba,0x47,
                          0xa8,0x3f,0x53,0xdb,0x39,0x9b,0x67,0xc8,0x08,0xe1,0xb0,0x83,0xae,0x6c,0x77,0x43,
                          0xc4,0x43,0xe2,0x66,0xcf,0xb4,0x5e,0x59,0x0c,0xc0,0xca,0x49,0x00,0x7b,0xa6,0x34,
                          0xcd,0xde,0xbd,0x13,0x3b,0xaa,0xc2,0x73,0xb4,0x81,0xad,0xaa,0x09,0xf5,0x43,0x76,
                          0x02,0x17,0x9f,0x13,0xf5,0x5a,0xb9,0xf9,0x77,0xda,0x53,0xa7,0x5e,0x17,0xab,0x7c,
                          0x3b,0x14,0xde,0x41,0xcb,0x08,0x06,0x4e,0x54,0x82,0x39,0x3a,0x56,0xdf,0x09,0xce,
                          0x21,0x0f,0x5e,0x34,0x51,0x16,0x85,0x2b,0x36,0x63,0xdf,0xe1,0xd6,0xc9,0x27,0x42,
                          0xe6,0x07,0x18,0x5e,0x3d,0xb5,0xeb,0x08,0xb1,0xc4,0xcb,0x7a,0xb5,0x9c,0x71,0x3f,
                          0x45,0xba,0xb3,0xf9,0x6c,0xb5,0xc7,0x52,0x2e,0xd7,0x3d,0x03,0x75,0x40,0x19,0x82,
                          0x48,0x18,0xce,0x4e,0x3c,0x27,0x01,0xe9,0x2d,0x90,0x7b,0x7a,0xc7,0xb0,0x6a,0x7a,
                          0xe7,0x79,0xf8,0x65,0x80,0x84,0x65,0x40,0xb4,0xec,0x26,0x0d,0x91,0x1a,0x53,0x03,
                          0x86,0x11,0x7b,0x1a,0x00,0x88,0x55,0xa3,0xbf,0x19,0x14,0xff,0x94,0x1b,0x9d,0x3a,
                          0x49,0x12,0x15,0xd4,0x8b,0xdc,0xeb,0x68,0xc1,0xf0,0x9b,0x67,0x00,0x3d,0xdc,0x3a,
                          0xeb,0xbb,0xae,0x54,0xa0,0x22,0x4e,0x24,0x01,0x4a,0x5b,0xf7,0x2e,0x0c,0xff,0xa5,
                          0xec,0xe3,0xb4,0x6a,0xe6,0x4b,0xe3,0x48,0x42,0x1c,0x68,0xd1,0xa0,0xee,0xed,0xb0,
                          0x73,0x00,0xc5,0xf4,0x2c,0x8b,0xb5,0xb3,0x8c,0xf6,0xc4,0xa2,0x4b,0x0a,0xd9,0x14,
                          0xbd,0x29,0xa2,0x1a,0x97,0x05,0x2b,0x87,0xe7,0x72,0x05,0x95,0x25,0xcc,0x7a,0xfc,
                          0x6b,0x1a,0x1d,0x0f,0xe3,0x81,0x7f,0x39,0x97,0xa4,0xc5,0xe6,0x10,0x7e,0xed,0x13,
                          0xd4,0x03,0x3b,0x03,0xb3,0x87,0x64,0x8e,0xbb,0xd2,0x2d,0x27,0x0d,0xd3,0xa9,0x42,
                          0xed,0x52,0x1d,0x55,0x47,0x43,0xb8,0xc6,0xb9,0x9e,0xe7,0x3b,0xa6,0x9f,0x2c,0x9d,
                          0xec,0x71,0xf3,0x29,0x09,0xec,0xdf,0x79,0x5a,0xa3,0x0f,0x82,0xe5,0x79,0xb1,0xe9,
                          0x41,0x81,0xc5,0x6f,0x59,0x59,0x70,0x00,0x9b,0xf3,0x73,0x1c,0x67,0x1c,0xfd,0xdf,
                          0xf7,0x28,0xc0,0x6e,0xa3,0xab,0x0d,0x82,0x0b,0xeb,0x36,0x9e,0x17,0x68,0x76,0x9d,
                          0x43,0x12,0x2e,0xf4,0xbc,0x84,0x9e,0x1a,0x66,0x02,0xfd,0x9a,0xb1,0x1b,0xd6,0xc8,
                          0x79,0x83,0x22,0xd8,0x39,0x89,0xf5,0xd2,0x3d,0x86,0x71,0x71,0xa4,0x14,0xb3,0x21,
                          0x7b,0x5e,0x91,0x5b,0xb3,0x89,0xf9,0x48,0x10,0xdb,0xe6,0x3e,0x49,0x8b,0xfd,0x88,
                          0xb2,0x78,0x33,0xfd,0x16,0x5f,0x7c,0x2f,0x0e,0xdd,0xa5,0x29,0x88,0x23,0x36,0x80,
                          0x74,0xca,0x9d,0x7a,0x35,0x3a,0x9e,0x9b,0xd9,0x9f,0x04,0x3b,0x2f,0x23,0x68,0x80,
                          0xd8,0xc9,0xfb,0x43,0xff,0xc1,0x51,0xf2,0x91,0x50,0x7b,0xe8,0xad,0x58,0x5a,0x65,
                          0x2f,0x86,0x7f,0x12,0xf4,0x6b,0xec,0x83,0x46,0x44,0xc1,0xe7,0x8c,0x33,0x57,0x96,
                          0xe6,0x74,0x70,0xd6,0x4e,0x48,0xba,0x49,0x15,0x5a,0x21,0x07,0xa8,0x80,0x43,0x9c,
                          0xa6,0xf0,0xe3,0x71,0xdf,0x7c,0x9d,0x6f,0x9a,0x91,0x67,0x27,0x7a,0x36,0x0d,0x89,
                          0xd3,0x2a,0xc5,0x22,0x40,0x24,0x87,0xf6,0x40,0xcf,0xcf,0xdc,0x90,0xe3,0xbc,0xc2,
                          0x35,0x7f,0x58,0x89,0x0d,0x93,0x27,0x45,0x70,0x0f,0xd0,0x29,0xd8,0x64,0xef,0xa9,
                          0x14,0x2a,0x7e,0xf4,0x44,0x2a,0x14,0xb2,0x3e,0xbd,0x5e,0xb6,0x2e,0xc9,0x5f,0x04,
                          0x90,0xef,0x0c,0xfd,0x08,0xbf,0xdd,0x85,0x7c,0x4a,0x91,0x10,0x20,0x5c,0x57,0x56,
                          0x62,0x4f,0x9f,0xa6,0x4d,0xd8,0x4f,0x79,0x55,0x26,0x91,0x71,0x5f,0x02,0xc9,0xa7,
                          0xb5,0x16,0xf1,0x58,0xa6,0x0b,0x6f,0x75,0x07,0x4d,0x9c,0xc8,0x12,0xa1,0x8c,0x41,
                          0x03,0xce,0x84,0x22,0x94,0x6b,0xac,0xb8,0x98,0xfd,0xa7,0x68,0x70,0x9c,0xa9,0xd0,
                          0xd1,0x61,0x79,0x40,0x48,0x69,0x8d,0xbe,0x00,0x03,0xc8,0x2a,0x02,0xcb,0x12,0x5b,
                          0xcb,0x49,0x08,0x26,0x06,0x47,0x67,0xff,0xd5,0x97,0x99,0xc2,0x42,0xd6,0xe2,0x4d,
                          0xa8,0xc4,0x11,0x45,0xac,0x8e,0xfd,0xc9,0x29,0xcb,0xea,0x0a,0x26,0xaa,0x90,0xe2,
                          0x5e,0xcd,0x9b,0x5d,0x6f,0x99,0x4d,0x00,0x14,0xda,0x10,0xe4,0x1a,0xee,0x81,0x3d,
                          0xa5,0x57,0x1c,0x4b,0xb3,0xae,0x4a,0x5e,0xbf,0xa7,0x90,0xd2,0x35,0x39,0x84,0x26,
                          0x52,0x53,0x87,0xc2,0xcd,0x7d,0x45,0x7e,0x9c,0x2d,0x21,0xef,0xe9,0x5f,0xf8,0xe9,
                          0x83,0x2f,0xac,0x69,0x8c,0xa5,0xee,0x73,0x1c,0x50,0x33,0x57,0x60,0xcb,0x44,0x47,
                          0xe7,0xec,0x69,0x16,0xff,0xa9,0xa1,0xcc,0xc8,0x1d,0x80,0x95,0x36,0xf3,0xed,0xea,
                          0x92,0x20,0xd0,0x81,0x32,0xbd,0x1d,0x1e,0x32,0x18,0x7d,0x9d,0x9b,0x1b,0xeb,0x0a,
                          0xba,0x06,0x0c,0x58,0x11,0x02,0x67,0x6e,0xc3,0xa1,0x6e,0x2d,0x82,0xdd,0xa1,0x6f,
                          0x07,0x14,0xf0,0x23,0x0a,0xdb,0x91,0xf2,0xeb,0xd2,0xd8,0x05,0xc7,0x57,0xa5,0x2b,
                          0xe2,0x19,0xd1,0xfd,0xda,0x2d,0x81,0xfd,0xbf,0x6d,0x3f,0xa8,0xb9,0xbe,0xab,0xb7,
                          0xe6,0x07,0xc9,0xc3,0xd6,0x59,0x95,0xd4,0xc2,0x57,0x50,0x18,0x30,0x11,0x51,0x5e,
                          0x17,0x24,0x44,0x5b,0x65,0x64,0xbb,0xe7,0x40,0x4f,0xd1,0x9d,0xa6,0xc1,0x58,0xc4,
                          0xea,0xbd,0x72,0xc3,0xc0,0x5b,0xd8,0xef,0xac,0x8a,0x38,0x8b,0x23,0xe9,0x34,0xf8,
                          0xd0,0x5c,0x37,0x90,0x71,0xab,0x5c,0xe5,0x27,0x9d,0xac,0xc0,0x2c,0x67,0xa3,0x17,
                          0x91,0x43,0x02,0x77,0x5f,0xe4,0x38,0x45,0xcd,0x41,0x25,0x85,0x1f,0xee,0xfb,0x54,
                          0xe3,0xc7,0xe7,0xed,0x97,0x8c,0xaf,0x67,0x19,0x07,0x76,0xd8,0xd7,0x04,0x86,0x90,
                          0x35,0x0e,0x95,0xba,0x4d,0xd7,0x8b,0x1d,0x2a,0x69,0x7b,0x33,0x09,0x06,0x25,0x2d,
                          0x24,0x31,0x3e,0xed,0x68,0xec,0xf8,0x15,0x39,0x9c,0xba,0x5f,0xb6,0xde,0x1d,0x57,
                          0x28,0xd0,0xa2,0x00,0xaf,0x8c,0x5f,0x10,0x6f,0x64,0xbf,0x81,0xde,0x8a,0x9b,0x84,
                          0x5f,0x38,0xb9,0x45,0x95,0x44,0x82,0xfc,0x30,0x7a,0x36,0xea,0xf1,0xca,0xec,0x71,
                          0x9a,0x1a,0xb6,0xf0,0x95,0xa1,0xa4,0x6f,0x34,0x38,0x5d,0xa0,0xda,0xf0,0x8b,0x3f,
                          0xb8,0x23,0xbb,0x74,0xbe,0xbc,0x6a,0x69,0xe1,0x5a,0x6d,0xca,0x01,0x7b,0x52,0x5a,
                          0x3d,0x99,0x3b,0xc9,0x97,0x51,0x74,0x38,0x8a,0x79,0x1f,0x0d,0x4f,0x4b,0x58,0xc4,
                          0x76,0x6c,0x27,0x29,0x0d,0xec,0x74,0xde,0x81,0x28,0xe3,0xc0,0x26,0xa3,0x8b,0xe7,
                          0x74,0x4b,0x54,0xd6,0xaa,0xc7,0x30,0xd8,0xa6,0xaf,0x3c,0x32,0xa8,0x71,0x63,0x94,
                          0x2d,0x5f,0xba,0x71,0xe0,0x07,0x63,0x65,0x63,0x2a,0xa4,0xb4,0x73,0xcd,0x36,0x1d,
                          0xc7,0xc6,0xfe,0xee,0xfe,0x74,0x15,0x74,0x7d,0x89,0x3b,0x36,0xe8,0x72,0xa7,0x3d,
                          0x78,0xb9,0x13,0xac,0xe9,0xfe,0x2e,0xdb,0x4a,0x7c,0x7f,0x16,0x2a,0x45,0xf6,0x13,
                          0x1f,0x25,0x4d,0x37,0xdf,0x42,0x20,0x0b,0x8b,0x85,0x27,0xd1,0x7a,0xbc,0xc2,0xcd,
                          0x92,0x14,0xb1,0x24,0x4b,0xe6,0x10,0x2c,0x4d,0x01,0x1a,0xf4,0xf4,0x97,0x3a,0x07,
                          0xcc,0x8e,0x9d,0x91,0x7d,0x59,0xf0,0x05,0x1d,0x5b,0x04,0x7c,0xec,0xbb,0x2a,0x14,
                          0x59,0x59,0x0f,0x94,0x83,0xee,0xc3,0x42,0xa5,0x91,0xb1,0x09,0xd2,0xd0,0xe9,0x88,
                          0x2b,0x52,0xf0,0x23,0xed,0xae,0xc0,0x63,0x78,0xa3,0x46,0x66,0x99,0x83,0xcf,0x28,
                          0x78,0x25,0x0a,0xc3,0x5a,0xb7,0xac,0xdd,0xb0,0x45,0x7f,0x54,0xe5,0xe0,0x7a,0x6a,
                          0xbc,0xfb,0x68,0x5c,0x78,0xc0,0x72,0xe7,0xd5,0x74,0xf7,0x4e,0x1b,0x55,0x35,0x71,
                          0x25,0x0d,0xf7,0x06,0xbd,0xce,0x94,0x94,0x71,0xb0,0x84,0x78,0x26,0xe7,0x48,0x65,
                          0x7c,0x44,0xa3,0x5c,0x95,0x39,0x7f,0x18,0x47,0x7a,0x3a,0xc7,0x7a,0x60,0x45,0x70,
                          0x21,0x9e,0x18,0xfd,0x21,0x9d,0xe3,0xca,0x0a,0x8f,0x5a,0x31,0x15,0xfe,0x59,0x85,
                          0xbc,0x8a,0x95,0x2f,0x56,0x8e,0xe2,0x17,0x61,0x0c,0xf0,0xb7,0xfa,0x10,0x5c,0xb2,
                          0xf7,0xfd,0x18,0x78,0xb6,0xc8,0x19,0x3c,0x26,0x35,0xe2,0x46,0x0e,0x01,0x6b,0xe4,
                          0xe9,0x67,0xc6,0xa4,0xb6,0xb5,0xc8,0x35,0xe1,0x84,0x2b,0x73,0xce,0x67,0x9a,0xe9,
                          0xe2,0xbd,0x04,0xb0,0x82,0xd7,0xc7,0x51,0xb9,0xb1,0x4d,0x09,0xd5,0x26,0xcc,0xc8,
                          0x0a,0x06,0x16,0x8a,0xf9,0x4f,0xa4,0x5c,0x2a,0x18,0x27,0x28,0xee,0x5a,0x8f,0xf7,
                          0x3b,0xf7,0xdf,0xbe,0x90,0x5b,0xfb,0x44,0x99,0xd4,0x17,0x47,0x31,0xeb,0xa9,0x49,
                          0x24,0x68,0x18,0xe0,0xb0,0xb7,0xbc,0x59,0x99,0x78,0x3c,0x7f,0x21,0xfd,0x71,0x49,
                          0xa8,0x1a,0x49,0xac,0x37,0x2c,0x1c,0x52,0xda,0xcf,0xa8,0x00,0x1d,0xcb,0x3e,0xe4,
                          0x28,0x9e,0x1b,0x77,0x6e,0x77,0x12,0x5b,0x9a,0xd7,0xa3,0x34,0xe4,0xfe,0x8b,0xd2,
                          0x58,0xf3,0xae,0x5e,0x29,0x8d,0x82,0x16,0x32,0x87,0x2a,0xd5,0x6a,0x9f,0x2f,0x81,
                          0x8a,0x02,0xc9,0xb0,0xc8,0x7d,0x90,0x52,0x35,0x85,0x3d,0xa2,0x6d,0x13,0x55,0xc6,
                          0x3f,0xcd,0xe4,0x37,0x34,0x0a,0xa0,0x88,0xb0,0x3b,0x05,0xc4,0x1e,0x64,0x55,0x72,
                          0x2c,0xb5,0x41,0x58,0x4a,0x33,0xfe,0x28,0x71,0x0e,0xe2,0xe4,0x1e,0x70,0x91,0xe5,
                          0x9f,0xb4,0x5a,0x1c,0xce,0x98,0xdc,0x7b,0x2c,0x80,0x74,0x76,0x72,0x64,0xab,0x73,
                          0x05,0x2b,0x70,0xa0,0xe1,0x2d,0xb0,0xe7,0x02,0xaa,0x4a,0x21,0xb4,0x71,0x73,0x60,
                          0xa7,0x3c,0x13,0xdb,0x37,0x7b,0xe5,0x46,0x3d,0xae,0xb6,0x7e,0xc1,0x63,0xe5,0xc8,
                          0xc0,0x0f,0x8e,0x2e,0xdb,0x7d,0x34,0x9b,0xd0,0xb3,0xd0,0xd1,0x68,0x76,0x56,0xb8,
                          0x38,0x59,0x63,0xb7,0x70,0x63,0x36,0xd1,0x06,0xde,0x1d,0x47,0x14,0x54,0x9f,0x42,
                          0xd2,0x98,0xe9,0x60,0xc6,0x70,0xaa,0x3b,0x1c,0xb8,0xc8,0x5a,0xf8,0xd2,0xf7,0x6d,
                          0x94,0x32,0xb4,0x31,0xad,0xe5,0x6c,0x25,0x37,0x0b,0x9e,0x44,0xa0,0x8b,0xb4,0xd2,
                          0x9c,0x94,0x20,0x2e,0x0f,0xcd,0x4b,0x82,0xa0,0xcf,0xd4,0x8d,0x3c,0xe7,0xd5,0x4c,
                          0x83,0x80,0x16,0x0e,0xcd,0xb9,0xa7,0xd5,0x54,0x92,0x08,0xd6,0x03,0x0d,0x25,0x1b,
                          0x6b,0x45,0x82,0x7f,0x20,0x36,0x20,0xf1,0xfa,0x29,0x10,0x01,0x1f,0xb0,0x95,0x37,
                          0x5f,0x54,0xed,0xbf,0xf6,0xd9,0xe7,0x75,0xe3,0x81,0x2a,0x02,0x62,0x62,0x21,0xb5,
                          0x48,0xf5,0xdb,0x2e,0x53,0xc3,0x8c,0x85,0xd9,0x07,0x0d,0x77,0x0a,0x7e,0x1d,0xd2,
                          0x29,0x97,0x70,0x0d,0x98,0x94,0x79,0xce,0xb6,0x6b,0xc2,0x1b,0x72,0x8d,0x3a,0xca,
                          0xb7,0x41,0xed,0x71,0xd5,0x5a,0x45,0xe4,0x08,0xff,0x30,0x62,0xfa,0x2b,0xb4,0x50,
                          0x90,0xf5,0xe3,0xfa,0xe8,0xd7,0x1c,0x5e,0xdc,0xc9,0x4e,0xf4,0x6c,0x85,0x07,0x1f,
                          0x14,0xa4,0xa1,0xc1,0x36,0xae,0x0f,0xf8,0x6f,0x8d,0x62,0x9c,0xd7,0x16,0x89,0xd8,
                          0xf1,0xf1,0x0c,0x76,0x43,0xb7,0x44,0xea,0x14,0xff,0x15,0xc1,0x2b,0x6c,0x6d,0xcc,
                          0x59,0xf5,0x63,0x1a,0x78,0x62,0x67,0xbf,0x48,0x3a,0x6c,0xe3,0xf1,0xc4,0xb8,0x04,
                          0xf9,0xd2,0xe3,0xfe,0x6d,0x28,0x80,0x99,0xcd,0xf1,0x7c,0x14,0xd2,0xc0,0x23,0x94,
                          0x17,0xe0,0x88,0xce,0x46,0x8e,0x84,0x2a,0x74,0x50,0x25,0xf9,0x83,0x5d,0x8c,0xc6,
                          0xa9,0xa6,0x4e,0x87,0xed,0xb0,0x37,0xc6,0x4d,0x4d,0x6c,0x7f,0x86,0x45,0xaa,0xcd,
                          0x75,0x4d,0xe5,0xf1,0xec,0x79,0x8a,0x54,0x67,0x0f,0x0a,0x07,0x42,0xe6,0xa3,0xd4,
                          0xb1,0xda,0x5a,0x7c,0xfe,0xef,0x11,0xa0,0xd8,0xdd,0xcd,0xbd,0x0c,0x40,0x27,0x22,
                          0xbf,0xdb,0xc7,0xc2,0x3d,0x26,0x31,0x17,0x6e,0x59,0xe5,0x34,0xae,0x3e,0xec,0x20,
                          0x44,0x3f,0xe3,0xb2,0xba,0x85,0x82,0xb1,0x6e,0xf2,0xdc,0x36,0x73,0xe2,0xcf,0xed,
                          0xe6,0x90,0x62,0x30,0xef,0x8e,0x51,0x82,0x09,0x02,0x97,0x57,0xbe,0x18,0x78,0xc8,
                          0xc2,0xb4,0x4c,0x1c,0x5f,0x44,0x68,0xda,0x42,0xa9,0x25,0x19,0x31,0xa4,0xb2,0xb5,
                          0x0e,0x89,0xd5,0x13,0x58,0xfe,0xbd,0x38,0x07,0x6f,0x9f,0x8f,0xe2,0xeb,0xf3,0x82,
                          0x50,0x40,0xa7,0x85,0xed,0x02,0xe2,0x89,0x6c,0xdb,0xff,0xe1,0xbf,0xca,0xa8,0x92,
                          0x35,0x88,0xa3,0x89,0xee,0x19,0x9c,0x3f,0x8c,0xf9,0x22,0xed,0x25,0x80,0x60,0x3f,
                          0x48,0xd9,0x74,0x47,0x7b,0xae,0x2f,0x06,0x45,0x81,0xde,0x52,0x56,0x0d,0x5f,0x4b,
                          0x4a,0x5a,0x83,0x9f,0xe1,0x03,0xf0,0x27,0x9b,0x67,0x24,0x09,0x24,0x61,0x6a,0xce,
                          0x99,0x71,0xdd,0xb0,0x7b,0xab,0xb7,0xc6,0x31,0xbc,0xcd,0x6e,0xbf,0xb1,0x1a,0xa8,
                          0xcb,0xc9,0xa4,0x54,0xda,0xea,0xa5,0x39,0xfc,0x73,0x29,0xdf,0x13,0x64,0xa2,0x02,
                          0x61,0x92,0x24,0x40,0xa8,0xb8,0xf3,0x9b,0x3a,0xa1,0xc9,0x2a,0xe6,0x8c,0x31,0x86,
                          0xff,0x27,0xd5,0x83,0x43,0xd2,0x04,0xd0,0x32,0x01,0x28,0x57,0xc9,0x11,0xbf,0x58,
                          0x64,0x2b,0xa3,0x91,0x19,0x8d,0x47,0x4f,0xdb,0x95,0x40,0x0e,0xd6,0xf2,0xff,0x9d,
                          0xe1,0xa9,0x43,0xd6,0x4e,0x12,0xcb,0x24,0x99,0x49,0x2c,0x1b,0x06,0x3f,0xd6,0x2b,
                          0x22,0xb7,0xdb,0xfb,0xa8,0xa8,0x09,0x9d,0x44,0x7b,0x87,0x5b,0xf6,0x8c,0x5b,0xfd,
                          0x22,0xd5,0x56,0xc8,0xf5,0x93,0xf8,0x1c,0x6f,0x67,0xe9,0xa1,0xef,0x2f,0x65,0xd5,
                          0xa6,0x48,0x12,0x59,0xb7,0x62,0xea,0x5a,0x27,0xdf,0x8f,0xd2,0x85,0xc2,0x1f,0xff,
                          0x1c,0xf9,0xca,0xa3,0x21,0x9d,0x1b,0x47,0xa9,0xca,0xb1,0xb0,0x9f,0x64,0x6a,0x19,
                          0xfd,0xa1,0x20,0x8b,0x98,0xba,0x68,0x44,0xe5,0xf2,0xa6,0x65,0x0b,0xa0,0xe2,0xf9,
                          0x5d,0x32,0x13,0x9a,0xe6,0x14,0x6b,0xf8,0xeb,0xe6,0xce,0x31,0xf1,0x09,0xf5,0x1e,
                          0x08,0xf9,0x7e,0xa2,0xd9,0x57,0x31,0x02,0x85,0x09,0x5f,0x33,0x2b,0xa6,0xa7,0x84,
                          0xf5,0xd2,0x44,0xf4,0x42,0xf4,0x15,0xe3,0x3a,0xab,0xbe,0xdc,0xe0,0x4c,0x97,0xba,
                          0x31,0xea,0x64,0x66,0xcc,0x54,0xe8,0xaf,0xa4,0xac,0x30,0xe6,0x97,0xb3,0x37,0x23,
                          0x8d,0xad,0xf1,0x37,0x1f,0xec,0x5c,0x83,0x49,0xf0,0x41,0xdf,0xbb,0x07,0xf9,0x71,
                          0xd4,0x9b,0xa5,0x18,0x8b,0xec,0x24,0x7b,0x37,0xfe,0x9e,0x2c,0x5f,0xb9,0x32,0xbb,
                          0x65,0x6e,0x78,0xce,0xd1,0x54,0xad,0x40,0xaf,0xac,0x3c,0xa3,0x70,0xdb,0x2c,0x7a,
                          0x69,0x72,0xc4,0xba,0xcf,0x25,0xc2,0xfd,0x2b,0xf2,0x33,0x6e,0xf2,0xe9,0x69,0x28,
                          0x2b,0x78,0xe1,0xe6,0xc1,0xce,0x5d,0x48,0xa7,0x22,0x23,0x0f,0x89,0xae,0x66,0x2a,
                          0x5d,0x65,0x2e,0x65,0x19,0xf4,0xa9,0x2f,0x70,0x0a,0xdf,0x1b,0xc4,0x4a,0x45,0x4b,
                          0x25,0xc6,0x19,0x6c,0xf7,0x2d,0x67,0xfd,0x2e,0x19,0x5a,0x36,0xab,0x4c,0x05,0x14,
                          0x8e,0x11,0x14,0x78,0x4d,0x90,0x11,0x4c,0xff,0xcd,0x3b,0xdc,0x9a,0x41,0x0c,0xf5,
                          0x42,0xa1,0xde,0x7e,0xe9,0x7c,0x68,0xe2,0xdd,0x1c,0x0d,0x65,0xd0,0x21,0xe3,0x72,
                          0x68,0xe7,0xe2,0xcb,0xb6,0x28,0xd1,0xc1,0x48,0xab,0x60,0x1c,0xf3,0x74,0xbf,0xa6,
                          0x32,0x9e,0xcc,0x8f,0x4a,0x2d,0xf8,0xf2,0xa5,0xcd,0xc8,0x7c,0xf7,0x1a,0x19,0xfc,
                          0x54,0x9f,0x5f,0x18,0x12,0x0b,0xe0,0x56,0x63,0x3a,0x8b,0x29,0xc0,0xd6,0x95,0x66,
                          0x15,0x10,0x40,0x8f,0x63,0x52,0x8d,0x5f,0x4d,0x37,0x71,0x46,0xa9,0x0d,0x91,0xd7,
                          0x3f,0xd8,0x42,0x6f,0xb6,0x29,0x7f,0x19,0xa6,0x13,0x6f,0xfe,0x0d,0x17,0x5f,0x10,
                          0x38,0xcc,0x35,0xe3,0x15,0xfd,0x04,0xbf,0x7f,0x00,0xa0,0xe1,0x91,0x44,0xc9,0xe0,
                          0xb7,0x83,0x7e,0x57,0xce,0x52,0x0f,0x8a,0xd0,0xaa,0x2c,0xe0,0x2a,0x46,0x91,0xd6,
                          0x43,0x52,0x4b,0x19,0x96,0xd5,0xd3,0x60,0x56,0x7c,0x3b,0x01,0x65,0x80,0x58,0x63,
                          0x22,0x64,0x58,0x0e,0x85,0x3d,0x06,0x8c,0x86,0x81,0xe7,0x1c,0x5c,0x2a,0xcc,0xd4,
                          0x85,0xff,0xe0,0xf4,0x4e,0xa1,0xa4,0x10,0x33,0x77,0xff,0x9f,0x19,0x4d,0xb4,0x4b,
                          0x33,0x07,0xd1,0xea,0x8b,0x94,0x8e,0x51,0x4f,0x05,0xc5,0x1c,0x64,0xf4,0xf1,0x5e,
                          0x6e,0x63,0x35,0x99,0xc4,0x63,0x70,0x5b,0x38,0x84,0x22,0x88,0x47,0x68,0xe0,0xe0,
                          0x7d,0x32,0x0a,0x51,0x10,0xf3,0xea,0xb2,0x4f,0x54,0x1b,0x1f,0x12,0xbf,0xf8,0x32,
                          0x39,0xda,0xa6,0x3b,0x0d,0x2b,0xb4,0x4a,0xa1,0x27,0x0d,0x96,0x4e,0xda,0xc8,0x30,
                          0x36,0x66,0xed,0x13,0x05,0x3b,0xc3,0xe9,0xd7,0x28,0xc8,0xcb,0x27,0xab,0x68,0xbc,
                          0x0f,0xba,0x0f,0x3f,0x20,0x78,0x6d,0x3a,0x2b,0x43,0xe3,0x71,0x62,0xc3,0x83,0x3a,
                          0x08,0xd2,0x1e,0xe4,0x23,0xe7,0x24,0x2d,0xdd,0xbf,0x81,0xe5,0xd1,0x58,0x5c,0x3d,
                          0xad,0xdc,0xfe,0x95,0x68,0x3d,0xcd,0xf4,0xd9,0xe3,0x26,0xc5,0x97,0xa0,0x93,0xfc,
                          0xcc,0xaa,0x6f,0x1e,0x71,0x22,0x0e,0xb5,0x74,0x3b,0x3d,0xa5,0xd6,0x25,0xae,0x9c,
                          0xa9,0x39,0xad,0x7d,0x0f,0x78,0xf6,0x46,0xc4,0xe6,0x90,0x04,0x04,0x89,0x68,0x1c,
                          0x50,0x44,0x21,0x36,0x3a,0xe5,0x28,0x04,0x00,0x34,0x14,0x54,0x29,0x0d,0xa5,0x16,
                          0xc1,0xf1,0xb8,0xd2,0x1f,0xe9,0xb1,0x11,0x39,0xa5,0x9c,0xeb,0xb0,0xe5,0x80,0xa2,
                          0x01,0x18,0xa3,0x32,0xbc,0xb4,0x9a,0x51,0x35,0xa2,0x3a,0x1b,0x96,0xbe,0xed,0xb6,
                          0x0a,0x02,0x25,0x68,0x9e,0x6b,0x5e,0x49,0xf9,0xd4,0xb1,0xfb,0x59,0xe6,0xea,0xbb,
                          0xca,0xbf,0x56,0x04,0x06,0x91,0x9b,0x30,0x7a,0xd8,0x79,0x36,0x4a,0x07,0x86,0xc7,
                          0x7f,0x9b,0x0d,0x28,0x9f,0xe6,0x8d,0x22,0x6c,0x4f,0xa3,0x69,0x80,0xaa,0xc1,0xe3,
                          0xb3,0x88,0x78,0x4e,0x58,0x51,0x2d,0xcf,0x30,0x89,0xc1,0x75,0xa9,0xfa,0xd1,0xf9,
                          0x27,0x23,0x58,0x0b,0x76,0xcb,0xc5,0xc1,0xd3,0x74,0xba,0xd6,0xc9,0x69,0x5a,0xf1,
                          0x2b,0x41,0xcd,0xc9,0xfd,0x65,0xc9,0xcf,0x15,0xdd,0x87,0xb5,0x74,0xf8,0x29,0x4a,
                          0x46,0x5f,0x76,0x9b,0x4f,0xd6,0x91,0x27,0x06,0x10,0x8e,0x7d,0x8f,0x7e,0x14,0x5f,
                          0x8d,0x13,0x74,0x02,0xd1,0x16,0x85,0x89,0xb6,0xfa,0xe3,0x9a,0xa6,0x36,0xa4,0xb1,
                          0x07,0x38,0x38,0xe2,0x8d,0xb0,0x44,0x7c,0x3e,0x3b,0xc9,0xe5,0xc9,0xa6,0xaa,0xa3,
                          0x84,0x81,0xb1,0x12,0xad,0x2d,0x86,0xdc,0xa8,0x5c,0x9a,0x74,0xf4,0xcc,0x0e,0xad,
                          0x4e,0xed,0x25,0xcd,0x24,0x71,0x36,0xeb,0x39,0xe2,0xb4,0x08,0x79,0x44,0xbb,0xba,
                          0x50,0xd8,0x65,0xa8,0xc7,0x7b,0x31,0x26,0xa5,0x44,0xba,0xb2,0x3e,0x15,0x47,0xdc,
                          0xb6,0xa3,0x9f,0x6b,0x7a,0x88,0x8f,0x81,0xe5,0x2d,0x34,0x06,0x8c,0xea,0xff,0xfb,
                          0x83,0xfb,0x7e,
                          };
    const params = try LZMAParams.read_header(test_data[0..13]);
    var outbuf = [_]u8{0} ** (128 * 1024); // need some space extra for this
    var output = DummyOutStream.new(outbuf[0..]);
    var buffer = [_]u8{0} ** (32 * 1024);  // probably needs to use params.dict_size;
    var cb = LZCircularBuffer.from_buffer(output, params.dict_size, buffer[0..params.dict_size]);
    var decoder = Decoder(LZCircularBuffer).init(cb, params);
    var instream = DummyInStream.new(test_data[params.pos .. ]);
    var rycoder = try RangeDecoder.new(&instream);

    try decoder.process(&rycoder);
    try decoder.output.finish();

    warn("params={}\n", params);
    warn("decoder.output.stream='{}'\n", decoder.output.stream);
    // Seems we managed to uncompress one version of ourselves, that
    // is one step towards success...
}
